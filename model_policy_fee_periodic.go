/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PolicyFeePeriodic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyFeePeriodic{}

// PolicyFeePeriodic Contains information on a specific periodic fee in a fee policy.
type PolicyFeePeriodic struct {
	// Whether the periodic fee is excluded from interest calculation.
	ExcludeFromInterestCalc *bool `json:"exclude_from_interest_calc,omitempty"`
	// Amount of the fee.
	FeeAmount *float32 `json:"fee_amount,omitempty"`
	// Number of days after an account is activated that the initial fee is charged. For example, if the value in this field is `30`, then the initial fee is charged 30 days after an account is activated.
	NumberOfDaysPostActivation *float32 `json:"number_of_days_post_activation,omitempty"`
}

// NewPolicyFeePeriodic instantiates a new PolicyFeePeriodic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyFeePeriodic() *PolicyFeePeriodic {
	this := PolicyFeePeriodic{}
	return &this
}

// NewPolicyFeePeriodicWithDefaults instantiates a new PolicyFeePeriodic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyFeePeriodicWithDefaults() *PolicyFeePeriodic {
	this := PolicyFeePeriodic{}
	return &this
}

// GetExcludeFromInterestCalc returns the ExcludeFromInterestCalc field value if set, zero value otherwise.
func (o *PolicyFeePeriodic) GetExcludeFromInterestCalc() bool {
	if o == nil || IsNil(o.ExcludeFromInterestCalc) {
		var ret bool
		return ret
	}
	return *o.ExcludeFromInterestCalc
}

// GetExcludeFromInterestCalcOk returns a tuple with the ExcludeFromInterestCalc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyFeePeriodic) GetExcludeFromInterestCalcOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFromInterestCalc) {
		return nil, false
	}
	return o.ExcludeFromInterestCalc, true
}

// HasExcludeFromInterestCalc returns a boolean if a field has been set.
func (o *PolicyFeePeriodic) HasExcludeFromInterestCalc() bool {
	if o != nil && !IsNil(o.ExcludeFromInterestCalc) {
		return true
	}

	return false
}

// SetExcludeFromInterestCalc gets a reference to the given bool and assigns it to the ExcludeFromInterestCalc field.
func (o *PolicyFeePeriodic) SetExcludeFromInterestCalc(v bool) {
	o.ExcludeFromInterestCalc = &v
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise.
func (o *PolicyFeePeriodic) GetFeeAmount() float32 {
	if o == nil || IsNil(o.FeeAmount) {
		var ret float32
		return ret
	}
	return *o.FeeAmount
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyFeePeriodic) GetFeeAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.FeeAmount) {
		return nil, false
	}
	return o.FeeAmount, true
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *PolicyFeePeriodic) HasFeeAmount() bool {
	if o != nil && !IsNil(o.FeeAmount) {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given float32 and assigns it to the FeeAmount field.
func (o *PolicyFeePeriodic) SetFeeAmount(v float32) {
	o.FeeAmount = &v
}

// GetNumberOfDaysPostActivation returns the NumberOfDaysPostActivation field value if set, zero value otherwise.
func (o *PolicyFeePeriodic) GetNumberOfDaysPostActivation() float32 {
	if o == nil || IsNil(o.NumberOfDaysPostActivation) {
		var ret float32
		return ret
	}
	return *o.NumberOfDaysPostActivation
}

// GetNumberOfDaysPostActivationOk returns a tuple with the NumberOfDaysPostActivation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyFeePeriodic) GetNumberOfDaysPostActivationOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberOfDaysPostActivation) {
		return nil, false
	}
	return o.NumberOfDaysPostActivation, true
}

// HasNumberOfDaysPostActivation returns a boolean if a field has been set.
func (o *PolicyFeePeriodic) HasNumberOfDaysPostActivation() bool {
	if o != nil && !IsNil(o.NumberOfDaysPostActivation) {
		return true
	}

	return false
}

// SetNumberOfDaysPostActivation gets a reference to the given float32 and assigns it to the NumberOfDaysPostActivation field.
func (o *PolicyFeePeriodic) SetNumberOfDaysPostActivation(v float32) {
	o.NumberOfDaysPostActivation = &v
}

func (o PolicyFeePeriodic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyFeePeriodic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExcludeFromInterestCalc) {
		toSerialize["exclude_from_interest_calc"] = o.ExcludeFromInterestCalc
	}
	if !IsNil(o.FeeAmount) {
		toSerialize["fee_amount"] = o.FeeAmount
	}
	if !IsNil(o.NumberOfDaysPostActivation) {
		toSerialize["number_of_days_post_activation"] = o.NumberOfDaysPostActivation
	}
	return toSerialize, nil
}

type NullablePolicyFeePeriodic struct {
	value *PolicyFeePeriodic
	isSet bool
}

func (v NullablePolicyFeePeriodic) Get() *PolicyFeePeriodic {
	return v.value
}

func (v *NullablePolicyFeePeriodic) Set(val *PolicyFeePeriodic) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyFeePeriodic) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyFeePeriodic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyFeePeriodic(val *PolicyFeePeriodic) *NullablePolicyFeePeriodic {
	return &NullablePolicyFeePeriodic{value: val, isSet: true}
}

func (v NullablePolicyFeePeriodic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyFeePeriodic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


