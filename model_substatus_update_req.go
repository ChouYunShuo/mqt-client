/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubstatusUpdateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstatusUpdateReq{}

// SubstatusUpdateReq Contains information relevant to deactivating a substatus.
type SubstatusUpdateReq struct {
	// The channel through which deactivation is occurring: - **ADMIN**: Added through the Marqeta Dashboard. - **API**: Initiated through the Core API. - **FRAUD**: Determined by Marqeta or the card network. - **SYSTEM**: Initiated by Marqeta 
	Channel *string `json:"channel,omitempty"`
	// Effective date of the deactivation, in UTC.
	EffectiveDate *time.Time `json:"effective_date,omitempty"`
	// Reason for deactivating the substatus.
	Reason *string `json:"reason,omitempty"`
	// The state of the substatus.
	State string `json:"state"`
}

type _SubstatusUpdateReq SubstatusUpdateReq

// NewSubstatusUpdateReq instantiates a new SubstatusUpdateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstatusUpdateReq(state string) *SubstatusUpdateReq {
	this := SubstatusUpdateReq{}
	this.State = state
	return &this
}

// NewSubstatusUpdateReqWithDefaults instantiates a new SubstatusUpdateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstatusUpdateReqWithDefaults() *SubstatusUpdateReq {
	this := SubstatusUpdateReq{}
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *SubstatusUpdateReq) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusUpdateReq) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *SubstatusUpdateReq) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *SubstatusUpdateReq) SetChannel(v string) {
	o.Channel = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *SubstatusUpdateReq) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusUpdateReq) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *SubstatusUpdateReq) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *SubstatusUpdateReq) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *SubstatusUpdateReq) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusUpdateReq) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *SubstatusUpdateReq) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *SubstatusUpdateReq) SetReason(v string) {
	o.Reason = &v
}

// GetState returns the State field value
func (o *SubstatusUpdateReq) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SubstatusUpdateReq) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SubstatusUpdateReq) SetState(v string) {
	o.State = v
}

func (o SubstatusUpdateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstatusUpdateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effective_date"] = o.EffectiveDate
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *SubstatusUpdateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstatusUpdateReq := _SubstatusUpdateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstatusUpdateReq)

	if err != nil {
		return err
	}

	*o = SubstatusUpdateReq(varSubstatusUpdateReq)

	return err
}

type NullableSubstatusUpdateReq struct {
	value *SubstatusUpdateReq
	isSet bool
}

func (v NullableSubstatusUpdateReq) Get() *SubstatusUpdateReq {
	return v.value
}

func (v *NullableSubstatusUpdateReq) Set(val *SubstatusUpdateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstatusUpdateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstatusUpdateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstatusUpdateReq(val *SubstatusUpdateReq) *NullableSubstatusUpdateReq {
	return &NullableSubstatusUpdateReq{value: val, isSet: true}
}

func (v NullableSubstatusUpdateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstatusUpdateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


