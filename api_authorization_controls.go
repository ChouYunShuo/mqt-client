/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AuthorizationControlsAPIService AuthorizationControlsAPI service
type AuthorizationControlsAPIService service

type AuthorizationControlsAPIGetAuthcontrolsRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	cardProduct *string
	user *string
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Unique identifier of the card product whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a card product.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) CardProduct(cardProduct string) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.cardProduct = &cardProduct
	return r
}

// Unique identifier of the user whose associated authorization controls you want to retrieve.  Enter the string \&quot;null\&quot; to list authorization controls that are not associated with a user.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) User(user string) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.user = &user
	return r
}

// The number of resources to retrieve.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) Count(count int32) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) StartIndex(startIndex int32) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) Fields(fields string) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r AuthorizationControlsAPIGetAuthcontrolsRequest) SortBy(sortBy string) AuthorizationControlsAPIGetAuthcontrolsRequest {
	r.sortBy = &sortBy
	return r
}

func (r AuthorizationControlsAPIGetAuthcontrolsRequest) Execute() (*AuthControlListResponse, *http.Response, error) {
	return r.ApiService.GetAuthcontrolsExecute(r)
}

/*
GetAuthcontrols List authorization controls

List all authorization controls associated with a specific user or card product, or list all authorization controls defined in your program.

Include either a `user` or a `card_product` query parameter to indicate the user or card product whose associated authorization controls you want to retrieve (do not include both).

To list all authorization controls for your program, omit the `user` and `card_product` query parameters from your request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthorizationControlsAPIGetAuthcontrolsRequest
*/
func (a *AuthorizationControlsAPIService) GetAuthcontrols(ctx context.Context) AuthorizationControlsAPIGetAuthcontrolsRequest {
	return AuthorizationControlsAPIGetAuthcontrolsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthControlListResponse
func (a *AuthorizationControlsAPIService) GetAuthcontrolsExecute(r AuthorizationControlsAPIGetAuthcontrolsRequest) (*AuthControlListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.GetAuthcontrols")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cardProduct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "card_product", r.cardProduct, "")
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	cardProduct *string
	user *string
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
}

// Unique identifier of the card product whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a card product.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) CardProduct(cardProduct string) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.cardProduct = &cardProduct
	return r
}

// Unique identifier of the user whose associated MID exemptions you want to retrieve.  Enter the string \&quot;null\&quot; to list MID exemptions that are not associated with a user.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) User(user string) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.user = &user
	return r
}

// The number of resources to retrieve.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) Count(count int32) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.count = &count
	return r
}

// The sort order index of the first resource in the returned array.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) StartIndex(startIndex int32) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) Fields(fields string) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) SortBy(sortBy string) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	r.sortBy = &sortBy
	return r
}

func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) Execute() (*AuthControlExemptMidsListResponse, *http.Response, error) {
	return r.ApiService.GetAuthcontrolsExemptmidsExecute(r)
}

/*
GetAuthcontrolsExemptmids List merchant identifier (MID) exemptions

Retrieve a list of all merchant (MID) exemptions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest
*/
func (a *AuthorizationControlsAPIService) GetAuthcontrolsExemptmids(ctx context.Context) AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest {
	return AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthControlExemptMidsListResponse
func (a *AuthorizationControlsAPIService) GetAuthcontrolsExemptmidsExecute(r AuthorizationControlsAPIGetAuthcontrolsExemptmidsRequest) (*AuthControlExemptMidsListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlExemptMidsListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.GetAuthcontrolsExemptmids")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/exemptmids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cardProduct != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "card_product", r.cardProduct, "")
	}
	if r.user != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user", r.user, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	token string
}

func (r AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest) Execute() (*AuthControlExemptMidsResponse, *http.Response, error) {
	return r.ApiService.GetAuthcontrolsExemptmidsTokenExecute(r)
}

/*
GetAuthcontrolsExemptmidsToken Retrieve a merchant identifier (MID) exemption

Retrieve a merchant (MID) exemption.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the authorization control resource.
 @return AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest
*/
func (a *AuthorizationControlsAPIService) GetAuthcontrolsExemptmidsToken(ctx context.Context, token string) AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest {
	return AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AuthControlExemptMidsResponse
func (a *AuthorizationControlsAPIService) GetAuthcontrolsExemptmidsTokenExecute(r AuthorizationControlsAPIGetAuthcontrolsExemptmidsTokenRequest) (*AuthControlExemptMidsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlExemptMidsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.GetAuthcontrolsExemptmidsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/exemptmids/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIGetAuthcontrolsTokenRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	token string
	fields *string
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r AuthorizationControlsAPIGetAuthcontrolsTokenRequest) Fields(fields string) AuthorizationControlsAPIGetAuthcontrolsTokenRequest {
	r.fields = &fields
	return r
}

func (r AuthorizationControlsAPIGetAuthcontrolsTokenRequest) Execute() (*AuthControlResponse, *http.Response, error) {
	return r.ApiService.GetAuthcontrolsTokenExecute(r)
}

/*
GetAuthcontrolsToken Retrieve authorization control

Retrieve a specific authorization control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Existing authorization control token.  Send a `GET` request to `/authcontrols` to retrieve authorization control tokens.
 @return AuthorizationControlsAPIGetAuthcontrolsTokenRequest
*/
func (a *AuthorizationControlsAPIService) GetAuthcontrolsToken(ctx context.Context, token string) AuthorizationControlsAPIGetAuthcontrolsTokenRequest {
	return AuthorizationControlsAPIGetAuthcontrolsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AuthControlResponse
func (a *AuthorizationControlsAPIService) GetAuthcontrolsTokenExecute(r AuthorizationControlsAPIGetAuthcontrolsTokenRequest) (*AuthControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.GetAuthcontrolsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIPostAuthcontrolsRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	authControlRequest *AuthControlRequest
}

// Auth control object
func (r AuthorizationControlsAPIPostAuthcontrolsRequest) AuthControlRequest(authControlRequest AuthControlRequest) AuthorizationControlsAPIPostAuthcontrolsRequest {
	r.authControlRequest = &authControlRequest
	return r
}

func (r AuthorizationControlsAPIPostAuthcontrolsRequest) Execute() (*AuthControlResponse, *http.Response, error) {
	return r.ApiService.PostAuthcontrolsExecute(r)
}

/*
PostAuthcontrols Create authorization control

Limit where a user can make transactions to a single merchant or group of merchants.
If multiple authorization controls apply to the same user, the limits of all controls are combined.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthorizationControlsAPIPostAuthcontrolsRequest
*/
func (a *AuthorizationControlsAPIService) PostAuthcontrols(ctx context.Context) AuthorizationControlsAPIPostAuthcontrolsRequest {
	return AuthorizationControlsAPIPostAuthcontrolsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthControlResponse
func (a *AuthorizationControlsAPIService) PostAuthcontrolsExecute(r AuthorizationControlsAPIPostAuthcontrolsRequest) (*AuthControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.PostAuthcontrols")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authControlRequest == nil {
		return localVarReturnValue, nil, reportError("authControlRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authControlRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	authControlExemptMidsRequest *AuthControlExemptMidsRequest
}

// Auth control exempt MID object
func (r AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest) AuthControlExemptMidsRequest(authControlExemptMidsRequest AuthControlExemptMidsRequest) AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest {
	r.authControlExemptMidsRequest = &authControlExemptMidsRequest
	return r
}

func (r AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest) Execute() (*AuthControlExemptMidsResponse, *http.Response, error) {
	return r.ApiService.PostAuthcontrolsExemptmidsExecute(r)
}

/*
PostAuthcontrolsExemptmids Create a merchant identifier (MID) exemption

Exempt an individual merchant from authorization controls by merchant identifier (MID).
Transactions originating from this MID ignore any otherwise applicable authorization controls.

[NOTE]
You can create MID exemptions in your user sandbox.
However, you must work with your Marqeta representative to create MID exemptions in a production environment.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest
*/
func (a *AuthorizationControlsAPIService) PostAuthcontrolsExemptmids(ctx context.Context) AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest {
	return AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthControlExemptMidsResponse
func (a *AuthorizationControlsAPIService) PostAuthcontrolsExemptmidsExecute(r AuthorizationControlsAPIPostAuthcontrolsExemptmidsRequest) (*AuthControlExemptMidsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlExemptMidsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.PostAuthcontrolsExemptmids")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/exemptmids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authControlExemptMidsRequest == nil {
		return localVarReturnValue, nil, reportError("authControlExemptMidsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authControlExemptMidsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	token string
	authControlExemptMidsUpdateRequest *AuthControlExemptMidsUpdateRequest
}

func (r AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest) AuthControlExemptMidsUpdateRequest(authControlExemptMidsUpdateRequest AuthControlExemptMidsUpdateRequest) AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest {
	r.authControlExemptMidsUpdateRequest = &authControlExemptMidsUpdateRequest
	return r
}

func (r AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.PutAuthcontrolsExemptmidsTokenExecute(r)
}

/*
PutAuthcontrolsExemptmidsToken Update a merchant identifier (MID) exemption

Update a merchant identifier exemption.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the authorization control resource.
 @return AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest
*/
func (a *AuthorizationControlsAPIService) PutAuthcontrolsExemptmidsToken(ctx context.Context, token string) AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest {
	return AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
func (a *AuthorizationControlsAPIService) PutAuthcontrolsExemptmidsTokenExecute(r AuthorizationControlsAPIPutAuthcontrolsExemptmidsTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.PutAuthcontrolsExemptmidsToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/exemptmids/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authControlExemptMidsUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AuthorizationControlsAPIPutAuthcontrolsTokenRequest struct {
	ctx context.Context
	ApiService *AuthorizationControlsAPIService
	token string
	authControlUpdateRequest *AuthControlUpdateRequest
}

// Auth control object
func (r AuthorizationControlsAPIPutAuthcontrolsTokenRequest) AuthControlUpdateRequest(authControlUpdateRequest AuthControlUpdateRequest) AuthorizationControlsAPIPutAuthcontrolsTokenRequest {
	r.authControlUpdateRequest = &authControlUpdateRequest
	return r
}

func (r AuthorizationControlsAPIPutAuthcontrolsTokenRequest) Execute() (*AuthControlResponse, *http.Response, error) {
	return r.ApiService.PutAuthcontrolsTokenExecute(r)
}

/*
PutAuthcontrolsToken Update authorization control

Update a specific authorization control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Existing authorization control token.  Send a `GET` request to `/authcontrols` to retrieve authorization control tokens.
 @return AuthorizationControlsAPIPutAuthcontrolsTokenRequest
*/
func (a *AuthorizationControlsAPIService) PutAuthcontrolsToken(ctx context.Context, token string) AuthorizationControlsAPIPutAuthcontrolsTokenRequest {
	return AuthorizationControlsAPIPutAuthcontrolsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return AuthControlResponse
func (a *AuthorizationControlsAPIService) PutAuthcontrolsTokenExecute(r AuthorizationControlsAPIPutAuthcontrolsTokenRequest) (*AuthControlResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthControlResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthorizationControlsAPIService.PutAuthcontrolsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authcontrols/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authControlUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("authControlUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authControlUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
