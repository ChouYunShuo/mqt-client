/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"github.com/shopspring/decimal"
)

// checks if the OriginalCurrency type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OriginalCurrency{}

// OriginalCurrency Original Currency
type OriginalCurrency struct {
	// original amount
	Amount *decimal.Decimal `json:"amount,omitempty"`
	// Currency code, such as EUR or USD.
	Code *string `json:"code,omitempty"`
}

// NewOriginalCurrency instantiates a new OriginalCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOriginalCurrency() *OriginalCurrency {
	this := OriginalCurrency{}
	return &this
}

// NewOriginalCurrencyWithDefaults instantiates a new OriginalCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginalCurrencyWithDefaults() *OriginalCurrency {
	this := OriginalCurrency{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *OriginalCurrency) GetAmount() decimal.Decimal {
	if o == nil || IsNil(o.Amount) {
		var ret decimal.Decimal
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginalCurrency) GetAmountOk() (*decimal.Decimal, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *OriginalCurrency) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given decimal.Decimal and assigns it to the Amount field.
func (o *OriginalCurrency) SetAmount(v decimal.Decimal) {
	o.Amount = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *OriginalCurrency) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OriginalCurrency) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *OriginalCurrency) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *OriginalCurrency) SetCode(v string) {
	o.Code = &v
}

func (o OriginalCurrency) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OriginalCurrency) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableOriginalCurrency struct {
	value *OriginalCurrency
	isSet bool
}

func (v NullableOriginalCurrency) Get() *OriginalCurrency {
	return v.value
}

func (v *NullableOriginalCurrency) Set(val *OriginalCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableOriginalCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableOriginalCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOriginalCurrency(val *OriginalCurrency) *NullableOriginalCurrency {
	return &NullableOriginalCurrency{value: val, isSet: true}
}

func (v NullableOriginalCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOriginalCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


