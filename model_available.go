/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Available type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Available{}

// Available Specifies the available balances of the velocity controls associated with a user.  This object is not returned if the velocity control window is `TRANSACTION`, because available balances do not apply to single-transaction velocity windows.
type Available struct {
	// Total amount of spend remaining in the velocity control.
	Amount decimal.Decimal `json:"amount"`
	// Number of days remaining in the velocity control time window.
	DaysRemaining *int32 `json:"days_remaining,omitempty"`
	// Number of uses remaining in the velocity control.
	Uses int32 `json:"uses"`
}

type _Available Available

// NewAvailable instantiates a new Available object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailable(amount decimal.Decimal, uses int32) *Available {
	this := Available{}
	this.Amount = amount
	this.Uses = uses
	return &this
}

// NewAvailableWithDefaults instantiates a new Available object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailableWithDefaults() *Available {
	this := Available{}
	var uses int32 = 0
	this.Uses = uses
	return &this
}

// GetAmount returns the Amount field value
func (o *Available) GetAmount() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Available) GetAmountOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Available) SetAmount(v decimal.Decimal) {
	o.Amount = v
}

// GetDaysRemaining returns the DaysRemaining field value if set, zero value otherwise.
func (o *Available) GetDaysRemaining() int32 {
	if o == nil || IsNil(o.DaysRemaining) {
		var ret int32
		return ret
	}
	return *o.DaysRemaining
}

// GetDaysRemainingOk returns a tuple with the DaysRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Available) GetDaysRemainingOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysRemaining) {
		return nil, false
	}
	return o.DaysRemaining, true
}

// HasDaysRemaining returns a boolean if a field has been set.
func (o *Available) HasDaysRemaining() bool {
	if o != nil && !IsNil(o.DaysRemaining) {
		return true
	}

	return false
}

// SetDaysRemaining gets a reference to the given int32 and assigns it to the DaysRemaining field.
func (o *Available) SetDaysRemaining(v int32) {
	o.DaysRemaining = &v
}

// GetUses returns the Uses field value
func (o *Available) GetUses() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uses
}

// GetUsesOk returns a tuple with the Uses field value
// and a boolean to check if the value has been set.
func (o *Available) GetUsesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uses, true
}

// SetUses sets field value
func (o *Available) SetUses(v int32) {
	o.Uses = v
}

func (o Available) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Available) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.DaysRemaining) {
		toSerialize["days_remaining"] = o.DaysRemaining
	}
	toSerialize["uses"] = o.Uses
	return toSerialize, nil
}

func (o *Available) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"uses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAvailable := _Available{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAvailable)

	if err != nil {
		return err
	}

	*o = Available(varAvailable)

	return err
}

type NullableAvailable struct {
	value *Available
	isSet bool
}

func (v NullableAvailable) Get() *Available {
	return v.value
}

func (v *NullableAvailable) Set(val *Available) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailable) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailable(val *Available) *NullableAvailable {
	return &NullableAvailable{value: val, isSet: true}
}

func (v NullableAvailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


