/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubstatusCreateReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstatusCreateReq{}

// SubstatusCreateReq Contains information relevant to creating a substatus.
type SubstatusCreateReq struct {
	// Additional dynamic attributes related to the substatus.
	Attributes []SubstatusCreateReqAttributesInner `json:"attributes,omitempty"`
	// List of events related to the substatus.
	Events []SubstatusEvent `json:"events"`
	// The unique identifier of the user or account for which you want to create a substatus.
	ResourceToken string `json:"resource_token"`
	// Possible values: USER, ACCOUNT. 
	ResourceType string `json:"resource_type"`
	// Possible values: HARDSHIP, FRAUD, MLA, SCRA, DECEASED, BANKRUPTCY. 
	Substatus string `json:"substatus"`
	// Unique identifier of the substatus.
	Token *string `json:"token,omitempty" validate:"regexp=(?!^ +$)^.+$"`
}

type _SubstatusCreateReq SubstatusCreateReq

// NewSubstatusCreateReq instantiates a new SubstatusCreateReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstatusCreateReq(events []SubstatusEvent, resourceToken string, resourceType string, substatus string) *SubstatusCreateReq {
	this := SubstatusCreateReq{}
	this.Events = events
	this.ResourceToken = resourceToken
	this.ResourceType = resourceType
	this.Substatus = substatus
	return &this
}

// NewSubstatusCreateReqWithDefaults instantiates a new SubstatusCreateReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstatusCreateReqWithDefaults() *SubstatusCreateReq {
	this := SubstatusCreateReq{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SubstatusCreateReq) GetAttributes() []SubstatusCreateReqAttributesInner {
	if o == nil || IsNil(o.Attributes) {
		var ret []SubstatusCreateReqAttributesInner
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetAttributesOk() ([]SubstatusCreateReqAttributesInner, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SubstatusCreateReq) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SubstatusCreateReqAttributesInner and assigns it to the Attributes field.
func (o *SubstatusCreateReq) SetAttributes(v []SubstatusCreateReqAttributesInner) {
	o.Attributes = v
}

// GetEvents returns the Events field value
func (o *SubstatusCreateReq) GetEvents() []SubstatusEvent {
	if o == nil {
		var ret []SubstatusEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetEventsOk() ([]SubstatusEvent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *SubstatusCreateReq) SetEvents(v []SubstatusEvent) {
	o.Events = v
}

// GetResourceToken returns the ResourceToken field value
func (o *SubstatusCreateReq) GetResourceToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceToken
}

// GetResourceTokenOk returns a tuple with the ResourceToken field value
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetResourceTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceToken, true
}

// SetResourceToken sets field value
func (o *SubstatusCreateReq) SetResourceToken(v string) {
	o.ResourceToken = v
}

// GetResourceType returns the ResourceType field value
func (o *SubstatusCreateReq) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SubstatusCreateReq) SetResourceType(v string) {
	o.ResourceType = v
}

// GetSubstatus returns the Substatus field value
func (o *SubstatusCreateReq) GetSubstatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetSubstatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Substatus, true
}

// SetSubstatus sets field value
func (o *SubstatusCreateReq) SetSubstatus(v string) {
	o.Substatus = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *SubstatusCreateReq) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusCreateReq) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *SubstatusCreateReq) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *SubstatusCreateReq) SetToken(v string) {
	o.Token = &v
}

func (o SubstatusCreateReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstatusCreateReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	toSerialize["events"] = o.Events
	toSerialize["resource_token"] = o.ResourceToken
	toSerialize["resource_type"] = o.ResourceType
	toSerialize["substatus"] = o.Substatus
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

func (o *SubstatusCreateReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"resource_token",
		"resource_type",
		"substatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstatusCreateReq := _SubstatusCreateReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstatusCreateReq)

	if err != nil {
		return err
	}

	*o = SubstatusCreateReq(varSubstatusCreateReq)

	return err
}

type NullableSubstatusCreateReq struct {
	value *SubstatusCreateReq
	isSet bool
}

func (v NullableSubstatusCreateReq) Get() *SubstatusCreateReq {
	return v.value
}

func (v *NullableSubstatusCreateReq) Set(val *SubstatusCreateReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstatusCreateReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstatusCreateReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstatusCreateReq(val *SubstatusCreateReq) *NullableSubstatusCreateReq {
	return &NullableSubstatusCreateReq{value: val, isSet: true}
}

func (v NullableSubstatusCreateReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstatusCreateReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


