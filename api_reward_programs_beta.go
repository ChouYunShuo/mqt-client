/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// RewardProgramsBetaAPIService RewardProgramsBetaAPI service
type RewardProgramsBetaAPIService service

type RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	journalEntryTokens *[]string
	count *int32
	startIndex *int64
	sortBy *string
}

// List of journal entry unique identifiers.
func (r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) JournalEntryTokens(journalEntryTokens []string) RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest {
	r.journalEntryTokens = &journalEntryTokens
	return r
}

// Number of resources to retrieve.
func (r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) Count(count int32) RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) StartIndex(startIndex int64) RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;.
func (r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) SortBy(sortBy string) RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest {
	r.sortBy = &sortBy
	return r
}

func (r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) Execute() (*RewardEntriesJournalEntriesPageResponse, *http.Response, error) {
	return r.ApiService.GetRewardEntriesByJournalEntryTokensExecute(r)
}

/*
GetRewardEntriesByJournalEntryTokens Retrieve reward entries by list of journal entry tokens

Retrieve an array of reward entries on a specific reward program by multiple journal entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest
*/
func (a *RewardProgramsBetaAPIService) GetRewardEntriesByJournalEntryTokens(ctx context.Context, token string) RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest {
	return RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardEntriesJournalEntriesPageResponse
func (a *RewardProgramsBetaAPIService) GetRewardEntriesByJournalEntryTokensExecute(r RewardProgramsBetaAPIGetRewardEntriesByJournalEntryTokensRequest) (*RewardEntriesJournalEntriesPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardEntriesJournalEntriesPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.GetRewardEntriesByJournalEntryTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/journalentries"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.journalEntryTokens == nil {
		return localVarReturnValue, nil, reportError("journalEntryTokens is required and must be specified")
	}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int64 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	{
		t := *r.journalEntryTokens
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "journal_entry_tokens", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "journal_entry_tokens", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIPostRewardProgramEntryRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	createRewardProgramsEntriesRequest *CreateRewardProgramsEntriesRequest
}

func (r RewardProgramsBetaAPIPostRewardProgramEntryRequest) CreateRewardProgramsEntriesRequest(createRewardProgramsEntriesRequest CreateRewardProgramsEntriesRequest) RewardProgramsBetaAPIPostRewardProgramEntryRequest {
	r.createRewardProgramsEntriesRequest = &createRewardProgramsEntriesRequest
	return r
}

func (r RewardProgramsBetaAPIPostRewardProgramEntryRequest) Execute() (*RewardProgramsEntriesResponse, *http.Response, error) {
	return r.ApiService.PostRewardProgramEntryExecute(r)
}

/*
PostRewardProgramEntry Create reward entry

Create a reward entry on a specific reward program.
Use this endpoint to manually create a reward entry if an existing reward is being disputed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIPostRewardProgramEntryRequest
*/
func (a *RewardProgramsBetaAPIService) PostRewardProgramEntry(ctx context.Context, token string) RewardProgramsBetaAPIPostRewardProgramEntryRequest {
	return RewardProgramsBetaAPIPostRewardProgramEntryRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsEntriesResponse
func (a *RewardProgramsBetaAPIService) PostRewardProgramEntryExecute(r RewardProgramsBetaAPIPostRewardProgramEntryRequest) (*RewardProgramsEntriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsEntriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.PostRewardProgramEntry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createRewardProgramsEntriesRequest == nil {
		return localVarReturnValue, nil, reportError("createRewardProgramsEntriesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createRewardProgramsEntriesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramRequest) Execute() (*RewardProgramsResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramExecute(r)
}

/*
RetrieveRewardProgram Retrieve reward program

Retrieve a specific reward program.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgram(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramExecute(r RewardProgramsBetaAPIRetrieveRewardProgramRequest) (*RewardProgramsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgram")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest) Execute() (*RewardProgramsBalancesResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramBalanceExecute(r)
}

/*
RetrieveRewardProgramBalance Retrieve reward program balances

Retrieve the balances for a specific reward program.

The reward accrual service calculates values to four-decimal precision, however the `/credit/rewardprograms/{token}/entries/balance` endpoint returns pending and accrued balances to two-decimal precision.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramBalance(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsBalancesResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramBalanceExecute(r RewardProgramsBetaAPIRetrieveRewardProgramBalanceRequest) (*RewardProgramsBalancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsBalancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/balances"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	startDate *time.Time
	endDate *time.Time
	count *int32
	startIndex *int64
	sortBy *string
	status *[]RewardEntryStatus
}

// The starting date (or date-time) of a date range from which to return resources, in UTC.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) StartDate(startDate time.Time) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.startDate = &startDate
	return r
}

// The ending date (or date-time) of a date range from which to return resources, in UTC.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) EndDate(endDate time.Time) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.endDate = &endDate
	return r
}

// Number of resources to retrieve.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) Count(count int32) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) StartIndex(startIndex int64) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;createdTime&#x60;, and not by the field names appearing in response bodies such as &#x60;created_time&#x60;.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) SortBy(sortBy string) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.sortBy = &sortBy
	return r
}

// Status of the reward entries in the returned array.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) Status(status []RewardEntryStatus) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	r.status = &status
	return r
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) Execute() (*RewardProgramsEntriesPage, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramEntriesExecute(r)
}

/*
RetrieveRewardProgramEntries List reward entries

Retrieve an array of reward entries on a specific reward program.

The reward accrual service calculates values to four-decimal precision, however the `/credit/rewardprograms/{token}/entries/balance` endpoint returns pending and accrued balances to two-decimal precision.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntries(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsEntriesPage
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntriesExecute(r RewardProgramsBetaAPIRetrieveRewardProgramEntriesRequest) (*RewardProgramsEntriesPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsEntriesPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/entries"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int64 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	startDate *time.Time
	endDate *time.Time
}

// The starting date (or date-time) of a date range from which to return resources, in UTC.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest) StartDate(startDate time.Time) RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest {
	r.startDate = &startDate
	return r
}

// The ending date (or date-time) of a date range from which to return resources, in UTC.
func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest) EndDate(endDate time.Time) RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest {
	r.endDate = &endDate
	return r
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest) Execute() (*RewardProgramsEntriesBalanceResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramEntriesBalanceExecute(r)
}

/*
RetrieveRewardProgramEntriesBalance Retrieve reward entries balance

Retrieve the balance of reward entries, which is the accrued rewards amount, within a specified date range.

The reward accrual service calculates values to four-decimal precision, however the `/credit/rewardprograms/{token}/entries/balance` endpoint returns pending and accrued balances to two-decimal precision.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntriesBalance(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsEntriesBalanceResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntriesBalanceExecute(r RewardProgramsBetaAPIRetrieveRewardProgramEntriesBalanceRequest) (*RewardProgramsEntriesBalanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsEntriesBalanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramEntriesBalance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/entries/balance"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startDate == nil {
		return localVarReturnValue, nil, reportError("startDate is required and must be specified")
	}
	if r.endDate == nil {
		return localVarReturnValue, nil, reportError("endDate is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "start_date", r.startDate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "end_date", r.endDate, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	entryToken string
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest) Execute() (*RewardProgramsEntriesResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramEntryExecute(r)
}

/*
RetrieveRewardProgramEntry Retrieve reward entry

Retrieve a specific reward entry on a reward program.

The reward accrual service calculates values to four-decimal precision, however the `/credit/rewardprograms/{token}/entries/balance` endpoint returns pending and accrued balances to two-decimal precision.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @param entryToken Unique identifier of the reward entry to retrieve.
 @return RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntry(ctx context.Context, token string, entryToken string) RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
		entryToken: entryToken,
	}
}

// Execute executes the request
//  @return RewardProgramsEntriesResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramEntryExecute(r RewardProgramsBetaAPIRetrieveRewardProgramEntryRequest) (*RewardProgramsEntriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsEntriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramEntry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/entries/{entry_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entry_token"+"}", url.PathEscape(parameterValueToString(r.entryToken, "entryToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramsRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	accountToken *string
	isActive *bool
	count *int32
	startIndex *int64
	sortBy *string
}

// The unique identifier of the credit account for which you want to retrieve reward programs.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) AccountToken(accountToken string) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	r.accountToken = &accountToken
	return r
}

// A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) IsActive(isActive bool) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	r.isActive = &isActive
	return r
}

// Number of resources to retrieve.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) Count(count int32) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) StartIndex(startIndex int64) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) SortBy(sortBy string) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	r.sortBy = &sortBy
	return r
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) Execute() (*RewardProgramsPageResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramsExecute(r)
}

/*
RetrieveRewardPrograms List reward programs

Retrieve an array of reward programs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RewardProgramsBetaAPIRetrieveRewardProgramsRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardPrograms(ctx context.Context) RewardProgramsBetaAPIRetrieveRewardProgramsRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RewardProgramsPageResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramsExecute(r RewardProgramsBetaAPIRetrieveRewardProgramsRequest) (*RewardProgramsPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardPrograms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_token", r.accountToken, "")
	}
	if r.isActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_active", r.isActive, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int64 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-updatedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	isActive *bool
	count *int32
	startIndex *int64
	sortBy *string
}

// A value of &#x60;true&#x60; returns active resources; &#x60;false&#x60; returns inactive resources.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) IsActive(isActive bool) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest {
	r.isActive = &isActive
	return r
}

// Number of resources to retrieve.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) Count(count int32) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) StartIndex(startIndex int64) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE*: You must sort using system field names such as &#x60;updatedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;updated_time&#x60;.
func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) SortBy(sortBy string) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest {
	r.sortBy = &sortBy
	return r
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) Execute() (*RewardProgramsRulesConfigsPage, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramsRulesConfigExecute(r)
}

/*
RetrieveRewardProgramsRulesConfig List rules configurations

Retrieve an array of rules configs for a specific reward program.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramsRulesConfig(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsRulesConfigsPage
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramsRulesConfigExecute(r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigRequest) (*RewardProgramsRulesConfigsPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsRulesConfigsPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramsRulesConfig")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/rulesconfigs"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.isActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_active", r.isActive, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int64 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-updatedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
}

func (r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest) Execute() (*RewardProgramsRulesConfigsResponse, *http.Response, error) {
	return r.ApiService.RetrieveRewardProgramsRulesConfigAppliedExecute(r)
}

/*
RetrieveRewardProgramsRulesConfigApplied Retrieve last rules configuration applied

Retrieve the most recently applied rules config on a specific reward program.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest
*/
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramsRulesConfigApplied(ctx context.Context, token string) RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest {
	return RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsRulesConfigsResponse
func (a *RewardProgramsBetaAPIService) RetrieveRewardProgramsRulesConfigAppliedExecute(r RewardProgramsBetaAPIRetrieveRewardProgramsRulesConfigAppliedRequest) (*RewardProgramsRulesConfigsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsRulesConfigsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.RetrieveRewardProgramsRulesConfigApplied")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}/rulesconfigs/applied"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RewardProgramsBetaAPIUpdateRewardProgramRequest struct {
	ctx context.Context
	ApiService *RewardProgramsBetaAPIService
	token string
	putRewardProgramsRequest *PutRewardProgramsRequest
}

func (r RewardProgramsBetaAPIUpdateRewardProgramRequest) PutRewardProgramsRequest(putRewardProgramsRequest PutRewardProgramsRequest) RewardProgramsBetaAPIUpdateRewardProgramRequest {
	r.putRewardProgramsRequest = &putRewardProgramsRequest
	return r
}

func (r RewardProgramsBetaAPIUpdateRewardProgramRequest) Execute() (*RewardProgramsResponse, *http.Response, error) {
	return r.ApiService.UpdateRewardProgramExecute(r)
}

/*
UpdateRewardProgram Activate or deactivate reward program

Activate or deactivate a specific reward program.

[CAUTION]
This endpoint is available for banks only.
Do not use this endpoint if you are a brand contributor.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the reward program.
 @return RewardProgramsBetaAPIUpdateRewardProgramRequest
*/
func (a *RewardProgramsBetaAPIService) UpdateRewardProgram(ctx context.Context, token string) RewardProgramsBetaAPIUpdateRewardProgramRequest {
	return RewardProgramsBetaAPIUpdateRewardProgramRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return RewardProgramsResponse
func (a *RewardProgramsBetaAPIService) UpdateRewardProgramExecute(r RewardProgramsBetaAPIUpdateRewardProgramRequest) (*RewardProgramsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardProgramsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RewardProgramsBetaAPIService.UpdateRewardProgram")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rewardprograms/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.putRewardProgramsRequest == nil {
		return localVarReturnValue, nil, reportError("putRewardProgramsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.putRewardProgramsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
