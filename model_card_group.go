/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CardGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardGroup{}

// CardGroup Request body for a Card Group object
type CardGroup struct {
	// Array of card tokens associated with group. There will be at least one card token in the array.
	CardTokens []string `json:"card_tokens,omitempty"`
	// Date and time the card group was created in the system. The date and time is provided in ISO 8601 format.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Unique identifier of the last reissued card token associated with group. It may be empty if there is no reissued card.
	LastIssuedCardToken *string `json:"last_issued_card_token,omitempty"`
	// Unique identifier of the card token associated with group. This is the card that will be used to create the card group. The Card Group Service will send a request to JCard to verify that this card is not a reissue or replacement.
	SourceCardToken string `json:"source_card_token"`
	// Unique identifier of the card group.  If you do not include a token, the system will generate one automatically. This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember. This value cannot be updated.
	Token string `json:"token"`
	// Date and time the card group was last updated in the system. The date and time is provided in ISO 8601 format.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
	// Unique identifier of the user this card group belongs to.
	UserToken *string `json:"user_token,omitempty"`
}

type _CardGroup CardGroup

// NewCardGroup instantiates a new CardGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardGroup(sourceCardToken string, token string) *CardGroup {
	this := CardGroup{}
	this.SourceCardToken = sourceCardToken
	this.Token = token
	return &this
}

// NewCardGroupWithDefaults instantiates a new CardGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardGroupWithDefaults() *CardGroup {
	this := CardGroup{}
	return &this
}

// GetCardTokens returns the CardTokens field value if set, zero value otherwise.
func (o *CardGroup) GetCardTokens() []string {
	if o == nil || IsNil(o.CardTokens) {
		var ret []string
		return ret
	}
	return o.CardTokens
}

// GetCardTokensOk returns a tuple with the CardTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardGroup) GetCardTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.CardTokens) {
		return nil, false
	}
	return o.CardTokens, true
}

// HasCardTokens returns a boolean if a field has been set.
func (o *CardGroup) HasCardTokens() bool {
	if o != nil && !IsNil(o.CardTokens) {
		return true
	}

	return false
}

// SetCardTokens gets a reference to the given []string and assigns it to the CardTokens field.
func (o *CardGroup) SetCardTokens(v []string) {
	o.CardTokens = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *CardGroup) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardGroup) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *CardGroup) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *CardGroup) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetLastIssuedCardToken returns the LastIssuedCardToken field value if set, zero value otherwise.
func (o *CardGroup) GetLastIssuedCardToken() string {
	if o == nil || IsNil(o.LastIssuedCardToken) {
		var ret string
		return ret
	}
	return *o.LastIssuedCardToken
}

// GetLastIssuedCardTokenOk returns a tuple with the LastIssuedCardToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardGroup) GetLastIssuedCardTokenOk() (*string, bool) {
	if o == nil || IsNil(o.LastIssuedCardToken) {
		return nil, false
	}
	return o.LastIssuedCardToken, true
}

// HasLastIssuedCardToken returns a boolean if a field has been set.
func (o *CardGroup) HasLastIssuedCardToken() bool {
	if o != nil && !IsNil(o.LastIssuedCardToken) {
		return true
	}

	return false
}

// SetLastIssuedCardToken gets a reference to the given string and assigns it to the LastIssuedCardToken field.
func (o *CardGroup) SetLastIssuedCardToken(v string) {
	o.LastIssuedCardToken = &v
}

// GetSourceCardToken returns the SourceCardToken field value
func (o *CardGroup) GetSourceCardToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceCardToken
}

// GetSourceCardTokenOk returns a tuple with the SourceCardToken field value
// and a boolean to check if the value has been set.
func (o *CardGroup) GetSourceCardTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceCardToken, true
}

// SetSourceCardToken sets field value
func (o *CardGroup) SetSourceCardToken(v string) {
	o.SourceCardToken = v
}

// GetToken returns the Token field value
func (o *CardGroup) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *CardGroup) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *CardGroup) SetToken(v string) {
	o.Token = v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *CardGroup) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardGroup) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *CardGroup) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *CardGroup) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

// GetUserToken returns the UserToken field value if set, zero value otherwise.
func (o *CardGroup) GetUserToken() string {
	if o == nil || IsNil(o.UserToken) {
		var ret string
		return ret
	}
	return *o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardGroup) GetUserTokenOk() (*string, bool) {
	if o == nil || IsNil(o.UserToken) {
		return nil, false
	}
	return o.UserToken, true
}

// HasUserToken returns a boolean if a field has been set.
func (o *CardGroup) HasUserToken() bool {
	if o != nil && !IsNil(o.UserToken) {
		return true
	}

	return false
}

// SetUserToken gets a reference to the given string and assigns it to the UserToken field.
func (o *CardGroup) SetUserToken(v string) {
	o.UserToken = &v
}

func (o CardGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardTokens) {
		toSerialize["card_tokens"] = o.CardTokens
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.LastIssuedCardToken) {
		toSerialize["last_issued_card_token"] = o.LastIssuedCardToken
	}
	toSerialize["source_card_token"] = o.SourceCardToken
	toSerialize["token"] = o.Token
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	if !IsNil(o.UserToken) {
		toSerialize["user_token"] = o.UserToken
	}
	return toSerialize, nil
}

func (o *CardGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source_card_token",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCardGroup := _CardGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCardGroup)

	if err != nil {
		return err
	}

	*o = CardGroup(varCardGroup)

	return err
}

type NullableCardGroup struct {
	value *CardGroup
	isSet bool
}

func (v NullableCardGroup) Get() *CardGroup {
	return v.value
}

func (v *NullableCardGroup) Set(val *CardGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCardGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCardGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardGroup(val *CardGroup) *NullableCardGroup {
	return &NullableCardGroup{value: val, isSet: true}
}

func (v NullableCardGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


