/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SubstatusAPIService SubstatusAPI service
type SubstatusAPIService service

type SubstatusAPICreateSubStatusRequest struct {
	ctx context.Context
	ApiService *SubstatusAPIService
	substatusCreateReq *SubstatusCreateReq
}

func (r SubstatusAPICreateSubStatusRequest) SubstatusCreateReq(substatusCreateReq SubstatusCreateReq) SubstatusAPICreateSubStatusRequest {
	r.substatusCreateReq = &substatusCreateReq
	return r
}

func (r SubstatusAPICreateSubStatusRequest) Execute() (*SubstatusResponse, *http.Response, error) {
	return r.ApiService.CreateSubStatusExecute(r)
}

/*
CreateSubStatus Create substatus

Create a sub status for an existing user or account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubstatusAPICreateSubStatusRequest
*/
func (a *SubstatusAPIService) CreateSubStatus(ctx context.Context) SubstatusAPICreateSubStatusRequest {
	return SubstatusAPICreateSubStatusRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubstatusResponse
func (a *SubstatusAPIService) CreateSubStatusExecute(r SubstatusAPICreateSubStatusRequest) (*SubstatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubstatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubstatusAPIService.CreateSubStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/substatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.substatusCreateReq == nil {
		return localVarReturnValue, nil, reportError("substatusCreateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.substatusCreateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubstatusAPIListSubStatusesRequest struct {
	ctx context.Context
	ApiService *SubstatusAPIService
	accountToken *string
	userToken *string
	isActive *bool
	substatuses *[]string
	count *int32
	startIndex *int32
	sortBy *string
}

// The account token to filter by.
func (r SubstatusAPIListSubStatusesRequest) AccountToken(accountToken string) SubstatusAPIListSubStatusesRequest {
	r.accountToken = &accountToken
	return r
}

// The user token to filter by.
func (r SubstatusAPIListSubStatusesRequest) UserToken(userToken string) SubstatusAPIListSubStatusesRequest {
	r.userToken = &userToken
	return r
}

func (r SubstatusAPIListSubStatusesRequest) IsActive(isActive bool) SubstatusAPIListSubStatusesRequest {
	r.isActive = &isActive
	return r
}

// comma-deliminited list of substatuses types to include Allowable values: HARDSHIP,FRAUD,MLA,SCRA,DECEASED,BANKRUPTCY
func (r SubstatusAPIListSubStatusesRequest) Substatuses(substatuses []string) SubstatusAPIListSubStatusesRequest {
	r.substatuses = &substatuses
	return r
}

// The number of resources to retrieve.
func (r SubstatusAPIListSubStatusesRequest) Count(count int32) SubstatusAPIListSubStatusesRequest {
	r.count = &count
	return r
}

// Show n-th paginated page
func (r SubstatusAPIListSubStatusesRequest) StartIndex(startIndex int32) SubstatusAPIListSubStatusesRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r SubstatusAPIListSubStatusesRequest) SortBy(sortBy string) SubstatusAPIListSubStatusesRequest {
	r.sortBy = &sortBy
	return r
}

func (r SubstatusAPIListSubStatusesRequest) Execute() (*SubstatusPage, *http.Response, error) {
	return r.ApiService.ListSubStatusesExecute(r)
}

/*
ListSubStatuses List substatuses

Get list of substatuses

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubstatusAPIListSubStatusesRequest
*/
func (a *SubstatusAPIService) ListSubStatuses(ctx context.Context) SubstatusAPIListSubStatusesRequest {
	return SubstatusAPIListSubStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubstatusPage
func (a *SubstatusAPIService) ListSubStatusesExecute(r SubstatusAPIListSubStatusesRequest) (*SubstatusPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubstatusPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubstatusAPIService.ListSubStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/substatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_token", r.accountToken, "")
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.isActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_active", r.isActive, "")
	}
	if r.substatuses != nil {
		t := *r.substatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "substatuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "substatuses", t, "multi")
		}
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubstatusAPIRetrieveSubStatusRequest struct {
	ctx context.Context
	ApiService *SubstatusAPIService
	substatusToken string
}

func (r SubstatusAPIRetrieveSubStatusRequest) Execute() (*SubstatusResponse, *http.Response, error) {
	return r.ApiService.RetrieveSubStatusExecute(r)
}

/*
RetrieveSubStatus Retrieve Substatus

Retrieve a user or account substatus.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param substatusToken The unique identifier of the substatus to retrieve.  Send a `GET` request to `/credit/substatuses` to retrieve existing substatus tokens.
 @return SubstatusAPIRetrieveSubStatusRequest
*/
func (a *SubstatusAPIService) RetrieveSubStatus(ctx context.Context, substatusToken string) SubstatusAPIRetrieveSubStatusRequest {
	return SubstatusAPIRetrieveSubStatusRequest{
		ApiService: a,
		ctx: ctx,
		substatusToken: substatusToken,
	}
}

// Execute executes the request
//  @return SubstatusResponse
func (a *SubstatusAPIService) RetrieveSubStatusExecute(r SubstatusAPIRetrieveSubStatusRequest) (*SubstatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubstatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubstatusAPIService.RetrieveSubStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/substatuses/{substatus_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"substatus_token"+"}", url.PathEscape(parameterValueToString(r.substatusToken, "substatusToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubstatusAPIUpdateSubStatusRequest struct {
	ctx context.Context
	ApiService *SubstatusAPIService
	substatusToken string
	substatusUpdateReq *SubstatusUpdateReq
}

func (r SubstatusAPIUpdateSubStatusRequest) SubstatusUpdateReq(substatusUpdateReq SubstatusUpdateReq) SubstatusAPIUpdateSubStatusRequest {
	r.substatusUpdateReq = &substatusUpdateReq
	return r
}

func (r SubstatusAPIUpdateSubStatusRequest) Execute() (*SubstatusResponse, *http.Response, error) {
	return r.ApiService.UpdateSubStatusExecute(r)
}

/*
UpdateSubStatus Update substatus

Update substatus for an user or account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param substatusToken The unique identifier of the substatus to update.
 @return SubstatusAPIUpdateSubStatusRequest
*/
func (a *SubstatusAPIService) UpdateSubStatus(ctx context.Context, substatusToken string) SubstatusAPIUpdateSubStatusRequest {
	return SubstatusAPIUpdateSubStatusRequest{
		ApiService: a,
		ctx: ctx,
		substatusToken: substatusToken,
	}
}

// Execute executes the request
//  @return SubstatusResponse
func (a *SubstatusAPIService) UpdateSubStatusExecute(r SubstatusAPIUpdateSubStatusRequest) (*SubstatusResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubstatusResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubstatusAPIService.UpdateSubStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/substatuses/{substatus_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"substatus_token"+"}", url.PathEscape(parameterValueToString(r.substatusToken, "substatusToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.substatusUpdateReq == nil {
		return localVarReturnValue, nil, reportError("substatusUpdateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.substatusUpdateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
