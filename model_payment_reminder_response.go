/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PaymentReminderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentReminderResponse{}

// PaymentReminderResponse Details of a payment reminder.
type PaymentReminderResponse struct {
	// Token of the associated account.
	AccountToken *string `json:"account_token,omitempty"`
	// Date and time when the Billing Cycle was created on Marqeta's credit platform
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Days until payment cutoff date
	DaysUntilDue *int32 `json:"days_until_due,omitempty"`
	// Last day a payment can be made before interest and fees are charged to the account.
	PaymentCutoffDate *time.Time `json:"payment_cutoff_date,omitempty"`
	// Payment due date, based on the credit account settings.
	PaymentDueDate *time.Time `json:"payment_due_date,omitempty"`
	// Amount remaining on the latest statement's minimum payment, after it's adjusted for payments, returned payments, and applicable credits that occurred after the latest statement's closing date.
	RemainingMinimumPaymentDue *float32 `json:"remaining_minimum_payment_due,omitempty"`
	// Token of the associated statement summary
	StatementSummaryToken *string `json:"statement_summary_token,omitempty"`
	// Token of the payment reminder
	Token *string `json:"token,omitempty"`
}

// NewPaymentReminderResponse instantiates a new PaymentReminderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentReminderResponse() *PaymentReminderResponse {
	this := PaymentReminderResponse{}
	return &this
}

// NewPaymentReminderResponseWithDefaults instantiates a new PaymentReminderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentReminderResponseWithDefaults() *PaymentReminderResponse {
	this := PaymentReminderResponse{}
	return &this
}

// GetAccountToken returns the AccountToken field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetAccountToken() string {
	if o == nil || IsNil(o.AccountToken) {
		var ret string
		return ret
	}
	return *o.AccountToken
}

// GetAccountTokenOk returns a tuple with the AccountToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetAccountTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AccountToken) {
		return nil, false
	}
	return o.AccountToken, true
}

// HasAccountToken returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasAccountToken() bool {
	if o != nil && !IsNil(o.AccountToken) {
		return true
	}

	return false
}

// SetAccountToken gets a reference to the given string and assigns it to the AccountToken field.
func (o *PaymentReminderResponse) SetAccountToken(v string) {
	o.AccountToken = &v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *PaymentReminderResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetDaysUntilDue returns the DaysUntilDue field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetDaysUntilDue() int32 {
	if o == nil || IsNil(o.DaysUntilDue) {
		var ret int32
		return ret
	}
	return *o.DaysUntilDue
}

// GetDaysUntilDueOk returns a tuple with the DaysUntilDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetDaysUntilDueOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysUntilDue) {
		return nil, false
	}
	return o.DaysUntilDue, true
}

// HasDaysUntilDue returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasDaysUntilDue() bool {
	if o != nil && !IsNil(o.DaysUntilDue) {
		return true
	}

	return false
}

// SetDaysUntilDue gets a reference to the given int32 and assigns it to the DaysUntilDue field.
func (o *PaymentReminderResponse) SetDaysUntilDue(v int32) {
	o.DaysUntilDue = &v
}

// GetPaymentCutoffDate returns the PaymentCutoffDate field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetPaymentCutoffDate() time.Time {
	if o == nil || IsNil(o.PaymentCutoffDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentCutoffDate
}

// GetPaymentCutoffDateOk returns a tuple with the PaymentCutoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetPaymentCutoffDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentCutoffDate) {
		return nil, false
	}
	return o.PaymentCutoffDate, true
}

// HasPaymentCutoffDate returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasPaymentCutoffDate() bool {
	if o != nil && !IsNil(o.PaymentCutoffDate) {
		return true
	}

	return false
}

// SetPaymentCutoffDate gets a reference to the given time.Time and assigns it to the PaymentCutoffDate field.
func (o *PaymentReminderResponse) SetPaymentCutoffDate(v time.Time) {
	o.PaymentCutoffDate = &v
}

// GetPaymentDueDate returns the PaymentDueDate field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetPaymentDueDate() time.Time {
	if o == nil || IsNil(o.PaymentDueDate) {
		var ret time.Time
		return ret
	}
	return *o.PaymentDueDate
}

// GetPaymentDueDateOk returns a tuple with the PaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetPaymentDueDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PaymentDueDate) {
		return nil, false
	}
	return o.PaymentDueDate, true
}

// HasPaymentDueDate returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasPaymentDueDate() bool {
	if o != nil && !IsNil(o.PaymentDueDate) {
		return true
	}

	return false
}

// SetPaymentDueDate gets a reference to the given time.Time and assigns it to the PaymentDueDate field.
func (o *PaymentReminderResponse) SetPaymentDueDate(v time.Time) {
	o.PaymentDueDate = &v
}

// GetRemainingMinimumPaymentDue returns the RemainingMinimumPaymentDue field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetRemainingMinimumPaymentDue() float32 {
	if o == nil || IsNil(o.RemainingMinimumPaymentDue) {
		var ret float32
		return ret
	}
	return *o.RemainingMinimumPaymentDue
}

// GetRemainingMinimumPaymentDueOk returns a tuple with the RemainingMinimumPaymentDue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetRemainingMinimumPaymentDueOk() (*float32, bool) {
	if o == nil || IsNil(o.RemainingMinimumPaymentDue) {
		return nil, false
	}
	return o.RemainingMinimumPaymentDue, true
}

// HasRemainingMinimumPaymentDue returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasRemainingMinimumPaymentDue() bool {
	if o != nil && !IsNil(o.RemainingMinimumPaymentDue) {
		return true
	}

	return false
}

// SetRemainingMinimumPaymentDue gets a reference to the given float32 and assigns it to the RemainingMinimumPaymentDue field.
func (o *PaymentReminderResponse) SetRemainingMinimumPaymentDue(v float32) {
	o.RemainingMinimumPaymentDue = &v
}

// GetStatementSummaryToken returns the StatementSummaryToken field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetStatementSummaryToken() string {
	if o == nil || IsNil(o.StatementSummaryToken) {
		var ret string
		return ret
	}
	return *o.StatementSummaryToken
}

// GetStatementSummaryTokenOk returns a tuple with the StatementSummaryToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetStatementSummaryTokenOk() (*string, bool) {
	if o == nil || IsNil(o.StatementSummaryToken) {
		return nil, false
	}
	return o.StatementSummaryToken, true
}

// HasStatementSummaryToken returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasStatementSummaryToken() bool {
	if o != nil && !IsNil(o.StatementSummaryToken) {
		return true
	}

	return false
}

// SetStatementSummaryToken gets a reference to the given string and assigns it to the StatementSummaryToken field.
func (o *PaymentReminderResponse) SetStatementSummaryToken(v string) {
	o.StatementSummaryToken = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaymentReminderResponse) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentReminderResponse) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaymentReminderResponse) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaymentReminderResponse) SetToken(v string) {
	o.Token = &v
}

func (o PaymentReminderResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentReminderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountToken) {
		toSerialize["account_token"] = o.AccountToken
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.DaysUntilDue) {
		toSerialize["days_until_due"] = o.DaysUntilDue
	}
	if !IsNil(o.PaymentCutoffDate) {
		toSerialize["payment_cutoff_date"] = o.PaymentCutoffDate
	}
	if !IsNil(o.PaymentDueDate) {
		toSerialize["payment_due_date"] = o.PaymentDueDate
	}
	if !IsNil(o.RemainingMinimumPaymentDue) {
		toSerialize["remaining_minimum_payment_due"] = o.RemainingMinimumPaymentDue
	}
	if !IsNil(o.StatementSummaryToken) {
		toSerialize["statement_summary_token"] = o.StatementSummaryToken
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	return toSerialize, nil
}

type NullablePaymentReminderResponse struct {
	value *PaymentReminderResponse
	isSet bool
}

func (v NullablePaymentReminderResponse) Get() *PaymentReminderResponse {
	return v.value
}

func (v *NullablePaymentReminderResponse) Set(val *PaymentReminderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentReminderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentReminderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentReminderResponse(val *PaymentReminderResponse) *NullablePaymentReminderResponse {
	return &NullablePaymentReminderResponse{value: val, isSet: true}
}

func (v NullablePaymentReminderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentReminderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


