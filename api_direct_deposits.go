/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DirectDepositsAPIService DirectDepositsAPI service
type DirectDepositsAPIService service

type DirectDepositsAPIGetDirectdepositsRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	count *int32
	startIndex *int32
	reversedAfterGracePeriod *bool
	userToken *string
	businessToken *string
	directDepositState *string
	startSettlementDate *string
	endSettlementDate *string
	sortBy *string
}

// The number of direct deposit records to retrieve.
func (r DirectDepositsAPIGetDirectdepositsRequest) Count(count int32) DirectDepositsAPIGetDirectdepositsRequest {
	r.count = &count
	return r
}

// Start index
func (r DirectDepositsAPIGetDirectdepositsRequest) StartIndex(startIndex int32) DirectDepositsAPIGetDirectdepositsRequest {
	r.startIndex = &startIndex
	return r
}

// Reversed after grace period
func (r DirectDepositsAPIGetDirectdepositsRequest) ReversedAfterGracePeriod(reversedAfterGracePeriod bool) DirectDepositsAPIGetDirectdepositsRequest {
	r.reversedAfterGracePeriod = &reversedAfterGracePeriod
	return r
}

// User token
func (r DirectDepositsAPIGetDirectdepositsRequest) UserToken(userToken string) DirectDepositsAPIGetDirectdepositsRequest {
	r.userToken = &userToken
	return r
}

// Business token
func (r DirectDepositsAPIGetDirectdepositsRequest) BusinessToken(businessToken string) DirectDepositsAPIGetDirectdepositsRequest {
	r.businessToken = &businessToken
	return r
}

// Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED 
func (r DirectDepositsAPIGetDirectdepositsRequest) DirectDepositState(directDepositState string) DirectDepositsAPIGetDirectdepositsRequest {
	r.directDepositState = &directDepositState
	return r
}

// Start Settlement Date
func (r DirectDepositsAPIGetDirectdepositsRequest) StartSettlementDate(startSettlementDate string) DirectDepositsAPIGetDirectdepositsRequest {
	r.startSettlementDate = &startSettlementDate
	return r
}

// End Settlement Date
func (r DirectDepositsAPIGetDirectdepositsRequest) EndSettlementDate(endSettlementDate string) DirectDepositsAPIGetDirectdepositsRequest {
	r.endSettlementDate = &endSettlementDate
	return r
}

// Sort order
func (r DirectDepositsAPIGetDirectdepositsRequest) SortBy(sortBy string) DirectDepositsAPIGetDirectdepositsRequest {
	r.sortBy = &sortBy
	return r
}

func (r DirectDepositsAPIGetDirectdepositsRequest) Execute() (*DirectDepositListResponse, *http.Response, error) {
	return r.ApiService.GetDirectdepositsExecute(r)
}

/*
GetDirectdeposits Retrieves a list of all direct deposit records for your program.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DirectDepositsAPIGetDirectdepositsRequest
*/
func (a *DirectDepositsAPIService) GetDirectdeposits(ctx context.Context) DirectDepositsAPIGetDirectdepositsRequest {
	return DirectDepositsAPIGetDirectdepositsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositListResponse
func (a *DirectDepositsAPIService) GetDirectdepositsExecute(r DirectDepositsAPIGetDirectdepositsRequest) (*DirectDepositListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.GetDirectdeposits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.reversedAfterGracePeriod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reversed_after_grace_period", r.reversedAfterGracePeriod, "")
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.directDepositState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direct_deposit_state", r.directDepositState, "")
	}
	if r.startSettlementDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_settlement_date", r.startSettlementDate, "")
	}
	if r.endSettlementDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_settlement_date", r.endSettlementDate, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	userOrBusinessToken string
}

func (r DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest) Execute() (*DepositAccount, *http.Response, error) {
	return r.ApiService.GetDirectdepositsAccountsUserorbusinesstokenExecute(r)
}

/*
GetDirectdepositsAccountsUserorbusinesstoken Returns an account and routing number which can be used for direct deposit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userOrBusinessToken
 @return DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest

Deprecated
*/
func (a *DirectDepositsAPIService) GetDirectdepositsAccountsUserorbusinesstoken(ctx context.Context, userOrBusinessToken string) DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest {
	return DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest{
		ApiService: a,
		ctx: ctx,
		userOrBusinessToken: userOrBusinessToken,
	}
}

// Execute executes the request
//  @return DepositAccount
// Deprecated
func (a *DirectDepositsAPIService) GetDirectdepositsAccountsUserorbusinesstokenExecute(r DirectDepositsAPIGetDirectdepositsAccountsUserorbusinesstokenRequest) (*DepositAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepositAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.GetDirectdepositsAccountsUserorbusinesstoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/accounts/{user_or_business_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_or_business_token"+"}", url.PathEscape(parameterValueToString(r.userOrBusinessToken, "userOrBusinessToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIGetDirectdepositsTokenRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	token string
}

func (r DirectDepositsAPIGetDirectdepositsTokenRequest) Execute() (*DirectDepositResponse, *http.Response, error) {
	return r.ApiService.GetDirectdepositsTokenExecute(r)
}

/*
GetDirectdepositsToken Returns a direct deposit entry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token
 @return DirectDepositsAPIGetDirectdepositsTokenRequest
*/
func (a *DirectDepositsAPIService) GetDirectdepositsToken(ctx context.Context, token string) DirectDepositsAPIGetDirectdepositsTokenRequest {
	return DirectDepositsAPIGetDirectdepositsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositResponse
func (a *DirectDepositsAPIService) GetDirectdepositsTokenExecute(r DirectDepositsAPIGetDirectdepositsTokenRequest) (*DirectDepositResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.GetDirectdepositsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIGetDirectdepositsTransitionsRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	count *int32
	userToken *string
	businessToken *string
	directDepositToken *string
	startIndex *int32
	sortBy *string
	states *string
}

// Number of direct deposit transitions to retrieve
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) Count(count int32) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.count = &count
	return r
}

// User token
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) UserToken(userToken string) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.userToken = &userToken
	return r
}

// Business token
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) BusinessToken(businessToken string) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.businessToken = &businessToken
	return r
}

// Direct deposit token
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) DirectDepositToken(directDepositToken string) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.directDepositToken = &directDepositToken
	return r
}

// Start index
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) StartIndex(startIndex int32) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.startIndex = &startIndex
	return r
}

// Sort order
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) SortBy(sortBy string) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.sortBy = &sortBy
	return r
}

// Comma-delimited list of direct deposit states to display e.g. PENDING | REVERSED | APPLIED | REJECTED 
func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) States(states string) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	r.states = &states
	return r
}

func (r DirectDepositsAPIGetDirectdepositsTransitionsRequest) Execute() (*DirectDepositTransitionListResponse, *http.Response, error) {
	return r.ApiService.GetDirectdepositsTransitionsExecute(r)
}

/*
GetDirectdepositsTransitions Returns a list of direct deposit transitions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DirectDepositsAPIGetDirectdepositsTransitionsRequest
*/
func (a *DirectDepositsAPIService) GetDirectdepositsTransitions(ctx context.Context) DirectDepositsAPIGetDirectdepositsTransitionsRequest {
	return DirectDepositsAPIGetDirectdepositsTransitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositTransitionListResponse
func (a *DirectDepositsAPIService) GetDirectdepositsTransitionsExecute(r DirectDepositsAPIGetDirectdepositsTransitionsRequest) (*DirectDepositTransitionListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositTransitionListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.GetDirectdepositsTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/transitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.directDepositToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direct_deposit_token", r.directDepositToken, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-createdTime"
		r.sortBy = &defaultValue
	}
	if r.states != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "states", r.states, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	token string
}

func (r DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest) Execute() (*DirectDepositTransitionResponse, *http.Response, error) {
	return r.ApiService.GetDirectdepositsTransitionsTokenExecute(r)
}

/*
GetDirectdepositsTransitionsToken Returns a direct deposit transition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token
 @return DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest
*/
func (a *DirectDepositsAPIService) GetDirectdepositsTransitionsToken(ctx context.Context, token string) DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest {
	return DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return DirectDepositTransitionResponse
func (a *DirectDepositsAPIService) GetDirectdepositsTransitionsTokenExecute(r DirectDepositsAPIGetDirectdepositsTransitionsTokenRequest) (*DirectDepositTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.GetDirectdepositsTransitionsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/transitions/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIPostDirectdepositsTransitionsRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	directDepositTransitionRequest *DirectDepositTransitionRequest
}

func (r DirectDepositsAPIPostDirectdepositsTransitionsRequest) DirectDepositTransitionRequest(directDepositTransitionRequest DirectDepositTransitionRequest) DirectDepositsAPIPostDirectdepositsTransitionsRequest {
	r.directDepositTransitionRequest = &directDepositTransitionRequest
	return r
}

func (r DirectDepositsAPIPostDirectdepositsTransitionsRequest) Execute() (*DirectDepositTransitionResponse, *http.Response, error) {
	return r.ApiService.PostDirectdepositsTransitionsExecute(r)
}

/*
PostDirectdepositsTransitions Creates a direct deposit transition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return DirectDepositsAPIPostDirectdepositsTransitionsRequest
*/
func (a *DirectDepositsAPIService) PostDirectdepositsTransitions(ctx context.Context) DirectDepositsAPIPostDirectdepositsTransitionsRequest {
	return DirectDepositsAPIPostDirectdepositsTransitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DirectDepositTransitionResponse
func (a *DirectDepositsAPIService) PostDirectdepositsTransitionsExecute(r DirectDepositsAPIPostDirectdepositsTransitionsRequest) (*DirectDepositTransitionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DirectDepositTransitionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.PostDirectdepositsTransitions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/transitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.directDepositTransitionRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest struct {
	ctx context.Context
	ApiService *DirectDepositsAPIService
	userOrBusinessToken string
	depositAccountUpdateRequest *DepositAccountUpdateRequest
}

// Deposit account update request
func (r DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest) DepositAccountUpdateRequest(depositAccountUpdateRequest DepositAccountUpdateRequest) DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest {
	r.depositAccountUpdateRequest = &depositAccountUpdateRequest
	return r
}

func (r DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest) Execute() (*DepositAccount, *http.Response, error) {
	return r.ApiService.PutDirectdepositsAccountsUserorbusinesstokenExecute(r)
}

/*
PutDirectdepositsAccountsUserorbusinesstoken Updates a specific direct deposit account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userOrBusinessToken User or business token
 @return DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest

Deprecated
*/
func (a *DirectDepositsAPIService) PutDirectdepositsAccountsUserorbusinesstoken(ctx context.Context, userOrBusinessToken string) DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest {
	return DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest{
		ApiService: a,
		ctx: ctx,
		userOrBusinessToken: userOrBusinessToken,
	}
}

// Execute executes the request
//  @return DepositAccount
// Deprecated
func (a *DirectDepositsAPIService) PutDirectdepositsAccountsUserorbusinesstokenExecute(r DirectDepositsAPIPutDirectdepositsAccountsUserorbusinesstokenRequest) (*DepositAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepositAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DirectDepositsAPIService.PutDirectdepositsAccountsUserorbusinesstoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/directdeposits/accounts/{user_or_business_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_or_business_token"+"}", url.PathEscape(parameterValueToString(r.userOrBusinessToken, "userOrBusinessToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.depositAccountUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("depositAccountUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.depositAccountUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
