/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebPushProvisioningApplePayJWSHeader type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebPushProvisioningApplePayJWSHeader{}

// WebPushProvisioningApplePayJWSHeader Contains header data for the JWS object.
type WebPushProvisioningApplePayJWSHeader struct {
	// Unique identifier of the JSON Web Signature (JWS) public key of the key pair used to generate the signature.
	Kid string `json:"kid"`
}

type _WebPushProvisioningApplePayJWSHeader WebPushProvisioningApplePayJWSHeader

// NewWebPushProvisioningApplePayJWSHeader instantiates a new WebPushProvisioningApplePayJWSHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebPushProvisioningApplePayJWSHeader(kid string) *WebPushProvisioningApplePayJWSHeader {
	this := WebPushProvisioningApplePayJWSHeader{}
	this.Kid = kid
	return &this
}

// NewWebPushProvisioningApplePayJWSHeaderWithDefaults instantiates a new WebPushProvisioningApplePayJWSHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebPushProvisioningApplePayJWSHeaderWithDefaults() *WebPushProvisioningApplePayJWSHeader {
	this := WebPushProvisioningApplePayJWSHeader{}
	return &this
}

// GetKid returns the Kid field value
func (o *WebPushProvisioningApplePayJWSHeader) GetKid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kid
}

// GetKidOk returns a tuple with the Kid field value
// and a boolean to check if the value has been set.
func (o *WebPushProvisioningApplePayJWSHeader) GetKidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kid, true
}

// SetKid sets field value
func (o *WebPushProvisioningApplePayJWSHeader) SetKid(v string) {
	o.Kid = v
}

func (o WebPushProvisioningApplePayJWSHeader) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebPushProvisioningApplePayJWSHeader) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kid"] = o.Kid
	return toSerialize, nil
}

func (o *WebPushProvisioningApplePayJWSHeader) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebPushProvisioningApplePayJWSHeader := _WebPushProvisioningApplePayJWSHeader{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebPushProvisioningApplePayJWSHeader)

	if err != nil {
		return err
	}

	*o = WebPushProvisioningApplePayJWSHeader(varWebPushProvisioningApplePayJWSHeader)

	return err
}

type NullableWebPushProvisioningApplePayJWSHeader struct {
	value *WebPushProvisioningApplePayJWSHeader
	isSet bool
}

func (v NullableWebPushProvisioningApplePayJWSHeader) Get() *WebPushProvisioningApplePayJWSHeader {
	return v.value
}

func (v *NullableWebPushProvisioningApplePayJWSHeader) Set(val *WebPushProvisioningApplePayJWSHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableWebPushProvisioningApplePayJWSHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableWebPushProvisioningApplePayJWSHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebPushProvisioningApplePayJWSHeader(val *WebPushProvisioningApplePayJWSHeader) *NullableWebPushProvisioningApplePayJWSHeader {
	return &NullableWebPushProvisioningApplePayJWSHeader{value: val, isSet: true}
}

func (v NullableWebPushProvisioningApplePayJWSHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebPushProvisioningApplePayJWSHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


