/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PutRewardProgramsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PutRewardProgramsRequest{}

// PutRewardProgramsRequest struct for PutRewardProgramsRequest
type PutRewardProgramsRequest struct {
	// A value of `true` indicates that the reward program is active and rewards can be accrued for the associated account.
	IsActive bool `json:"is_active"`
	// A note explaining why the reward program is being activated or deactivated.
	Note string `json:"note"`
}

type _PutRewardProgramsRequest PutRewardProgramsRequest

// NewPutRewardProgramsRequest instantiates a new PutRewardProgramsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPutRewardProgramsRequest(isActive bool, note string) *PutRewardProgramsRequest {
	this := PutRewardProgramsRequest{}
	this.IsActive = isActive
	this.Note = note
	return &this
}

// NewPutRewardProgramsRequestWithDefaults instantiates a new PutRewardProgramsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPutRewardProgramsRequestWithDefaults() *PutRewardProgramsRequest {
	this := PutRewardProgramsRequest{}
	return &this
}

// GetIsActive returns the IsActive field value
func (o *PutRewardProgramsRequest) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *PutRewardProgramsRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *PutRewardProgramsRequest) SetIsActive(v bool) {
	o.IsActive = v
}

// GetNote returns the Note field value
func (o *PutRewardProgramsRequest) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *PutRewardProgramsRequest) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *PutRewardProgramsRequest) SetNote(v string) {
	o.Note = v
}

func (o PutRewardProgramsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PutRewardProgramsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_active"] = o.IsActive
	toSerialize["note"] = o.Note
	return toSerialize, nil
}

func (o *PutRewardProgramsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_active",
		"note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPutRewardProgramsRequest := _PutRewardProgramsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPutRewardProgramsRequest)

	if err != nil {
		return err
	}

	*o = PutRewardProgramsRequest(varPutRewardProgramsRequest)

	return err
}

type NullablePutRewardProgramsRequest struct {
	value *PutRewardProgramsRequest
	isSet bool
}

func (v NullablePutRewardProgramsRequest) Get() *PutRewardProgramsRequest {
	return v.value
}

func (v *NullablePutRewardProgramsRequest) Set(val *PutRewardProgramsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePutRewardProgramsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePutRewardProgramsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePutRewardProgramsRequest(val *PutRewardProgramsRequest) *NullablePutRewardProgramsRequest {
	return &NullablePutRewardProgramsRequest{value: val, isSet: true}
}

func (v NullablePutRewardProgramsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePutRewardProgramsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


