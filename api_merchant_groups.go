/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MerchantGroupsAPIService MerchantGroupsAPI service
type MerchantGroupsAPIService service

type MerchantGroupsAPIGetMerchantGroupRequest struct {
	ctx context.Context
	ApiService *MerchantGroupsAPIService
	token string
}

func (r MerchantGroupsAPIGetMerchantGroupRequest) Execute() (*MerchantGroupResponse, *http.Response, error) {
	return r.ApiService.GetMerchantGroupExecute(r)
}

/*
GetMerchantGroup Retrieve merchant group

To retrieve a specific merchant group, send a `GET` request to the `/merchantgroups/{token}` endpoint.
Include the merchant group `token` path parameter to specify the merchant group to return.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the merchant group.
 @return MerchantGroupsAPIGetMerchantGroupRequest
*/
func (a *MerchantGroupsAPIService) GetMerchantGroup(ctx context.Context, token string) MerchantGroupsAPIGetMerchantGroupRequest {
	return MerchantGroupsAPIGetMerchantGroupRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return MerchantGroupResponse
func (a *MerchantGroupsAPIService) GetMerchantGroupExecute(r MerchantGroupsAPIGetMerchantGroupRequest) (*MerchantGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantGroupsAPIService.GetMerchantGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchantgroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantGroupsAPIGetMerchantGroupsRequest struct {
	ctx context.Context
	ApiService *MerchantGroupsAPIService
	mid *string
	count *int32
	startIndex *int32
	sortBy *string
}

// Returns all merchant groups that contain the specified merchant identifier.
func (r MerchantGroupsAPIGetMerchantGroupsRequest) Mid(mid string) MerchantGroupsAPIGetMerchantGroupsRequest {
	r.mid = &mid
	return r
}

// Number of resources to retrieve.
func (r MerchantGroupsAPIGetMerchantGroupsRequest) Count(count int32) MerchantGroupsAPIGetMerchantGroupsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r MerchantGroupsAPIGetMerchantGroupsRequest) StartIndex(startIndex int32) MerchantGroupsAPIGetMerchantGroupsRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r MerchantGroupsAPIGetMerchantGroupsRequest) SortBy(sortBy string) MerchantGroupsAPIGetMerchantGroupsRequest {
	r.sortBy = &sortBy
	return r
}

func (r MerchantGroupsAPIGetMerchantGroupsRequest) Execute() (*MerchantGroupListResponse, *http.Response, error) {
	return r.ApiService.GetMerchantGroupsExecute(r)
}

/*
GetMerchantGroups List merchant groups

To return an array of all merchant groups, send a `GET` request to the `/merchantgroups` endpoint.

To return an array of all merchant groups that include a specific merchant identifier, send a `GET` request to the `/merchantgroups` endpoint that includes the merchant identifier in the query parameters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantGroupsAPIGetMerchantGroupsRequest
*/
func (a *MerchantGroupsAPIService) GetMerchantGroups(ctx context.Context) MerchantGroupsAPIGetMerchantGroupsRequest {
	return MerchantGroupsAPIGetMerchantGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGroupListResponse
func (a *MerchantGroupsAPIService) GetMerchantGroupsExecute(r MerchantGroupsAPIGetMerchantGroupsRequest) (*MerchantGroupListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGroupListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantGroupsAPIService.GetMerchantGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchantgroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.mid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "mid", r.mid, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 10
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantGroupsAPIPostMerchantGroupRequest struct {
	ctx context.Context
	ApiService *MerchantGroupsAPIService
	merchantGroupRequest *MerchantGroupRequest
}

func (r MerchantGroupsAPIPostMerchantGroupRequest) MerchantGroupRequest(merchantGroupRequest MerchantGroupRequest) MerchantGroupsAPIPostMerchantGroupRequest {
	r.merchantGroupRequest = &merchantGroupRequest
	return r
}

func (r MerchantGroupsAPIPostMerchantGroupRequest) Execute() (*MerchantGroupResponse, *http.Response, error) {
	return r.ApiService.PostMerchantGroupExecute(r)
}

/*
PostMerchantGroup Create merchant group

To create a merchant group, send a `POST` request to the `/merchantgroups` endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MerchantGroupsAPIPostMerchantGroupRequest
*/
func (a *MerchantGroupsAPIService) PostMerchantGroup(ctx context.Context) MerchantGroupsAPIPostMerchantGroupRequest {
	return MerchantGroupsAPIPostMerchantGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantGroupResponse
func (a *MerchantGroupsAPIService) PostMerchantGroupExecute(r MerchantGroupsAPIPostMerchantGroupRequest) (*MerchantGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantGroupsAPIService.PostMerchantGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchantgroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantGroupRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MerchantGroupsAPIPutMerchantGroupsTokenRequest struct {
	ctx context.Context
	ApiService *MerchantGroupsAPIService
	token string
	merchantGroupUpdateRequest *MerchantGroupUpdateRequest
}

// Merchant Group
func (r MerchantGroupsAPIPutMerchantGroupsTokenRequest) MerchantGroupUpdateRequest(merchantGroupUpdateRequest MerchantGroupUpdateRequest) MerchantGroupsAPIPutMerchantGroupsTokenRequest {
	r.merchantGroupUpdateRequest = &merchantGroupUpdateRequest
	return r
}

func (r MerchantGroupsAPIPutMerchantGroupsTokenRequest) Execute() (*MerchantGroupResponse, *http.Response, error) {
	return r.ApiService.PutMerchantGroupsTokenExecute(r)
}

/*
PutMerchantGroupsToken Update merchant group

To update a merchant group, send a `PUT` request to the `/merchantgroups/{token}` endpoint.
Include the merchant group `token` path parameter to specify the merchant group to update.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the merchant group.
 @return MerchantGroupsAPIPutMerchantGroupsTokenRequest
*/
func (a *MerchantGroupsAPIService) PutMerchantGroupsToken(ctx context.Context, token string) MerchantGroupsAPIPutMerchantGroupsTokenRequest {
	return MerchantGroupsAPIPutMerchantGroupsTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return MerchantGroupResponse
func (a *MerchantGroupsAPIService) PutMerchantGroupsTokenExecute(r MerchantGroupsAPIPutMerchantGroupsTokenRequest) (*MerchantGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MerchantGroupsAPIService.PutMerchantGroupsToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchantgroups/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.merchantGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("merchantGroupUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
