/*
Core API

Testing AdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/torpago/mqt-client"
)

func Test_openapi_AdminAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AdminAPIService ReplayFailedStatements", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AdminAPI.ReplayFailedStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService ReplayFailedStatementsByShortCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shortCode string

		resp, httpRes, err := apiClient.AdminAPI.ReplayFailedStatementsByShortCode(context.Background(), shortCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService ReplaySingleFailedStatement", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shortCode string
		var accountToken string

		resp, httpRes, err := apiClient.AdminAPI.ReplaySingleFailedStatement(context.Background(), shortCode, accountToken).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService RetryAchPayment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shortCode string

		resp, httpRes, err := apiClient.AdminAPI.RetryAchPayment(context.Background(), shortCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AdminAPIService ScheduleStatements", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AdminAPI.ScheduleStatements(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
