/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubstatusResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubstatusResponse{}

// SubstatusResponse Contains information about the substatus.
type SubstatusResponse struct {
	// Additional dynamic attributes related to the substatus.
	Attributes []SubstatusCreateReqAttributesInner `json:"attributes,omitempty"`
	// Date and time when the substatus was created on Marqeta's credit platform, in UTC.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// List of events related to the substatus.
	Events []SubstatusEventResponseDetails `json:"events,omitempty"`
	// Flag indicating whether the substatus is active (false when deactivated).
	IsActive bool `json:"is_active"`
	// substatus resource token
	ResourceToken string `json:"resource_token"`
	// substatus resource type
	ResourceType string `json:"resource_type"`
	// state of the substatus
	State *string `json:"state,omitempty"`
	// substatus
	Substatus string `json:"substatus"`
	// substatus token
	Token string `json:"token"`
	// Date and time when the substatus was last updated on Marqeta's credit platform, in UTC.
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
}

type _SubstatusResponse SubstatusResponse

// NewSubstatusResponse instantiates a new SubstatusResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubstatusResponse(isActive bool, resourceToken string, resourceType string, substatus string, token string) *SubstatusResponse {
	this := SubstatusResponse{}
	this.IsActive = isActive
	this.ResourceToken = resourceToken
	this.ResourceType = resourceType
	this.Substatus = substatus
	this.Token = token
	return &this
}

// NewSubstatusResponseWithDefaults instantiates a new SubstatusResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubstatusResponseWithDefaults() *SubstatusResponse {
	this := SubstatusResponse{}
	return &this
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SubstatusResponse) GetAttributes() []SubstatusCreateReqAttributesInner {
	if o == nil || IsNil(o.Attributes) {
		var ret []SubstatusCreateReqAttributesInner
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetAttributesOk() ([]SubstatusCreateReqAttributesInner, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SubstatusResponse) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []SubstatusCreateReqAttributesInner and assigns it to the Attributes field.
func (o *SubstatusResponse) SetAttributes(v []SubstatusCreateReqAttributesInner) {
	o.Attributes = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *SubstatusResponse) GetCreatedTime() time.Time {
	if o == nil || IsNil(o.CreatedTime) {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedTime) {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SubstatusResponse) HasCreatedTime() bool {
	if o != nil && !IsNil(o.CreatedTime) {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *SubstatusResponse) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SubstatusResponse) GetEvents() []SubstatusEventResponseDetails {
	if o == nil || IsNil(o.Events) {
		var ret []SubstatusEventResponseDetails
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetEventsOk() ([]SubstatusEventResponseDetails, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SubstatusResponse) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SubstatusEventResponseDetails and assigns it to the Events field.
func (o *SubstatusResponse) SetEvents(v []SubstatusEventResponseDetails) {
	o.Events = v
}

// GetIsActive returns the IsActive field value
func (o *SubstatusResponse) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *SubstatusResponse) SetIsActive(v bool) {
	o.IsActive = v
}

// GetResourceToken returns the ResourceToken field value
func (o *SubstatusResponse) GetResourceToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceToken
}

// GetResourceTokenOk returns a tuple with the ResourceToken field value
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetResourceTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceToken, true
}

// SetResourceToken sets field value
func (o *SubstatusResponse) SetResourceToken(v string) {
	o.ResourceToken = v
}

// GetResourceType returns the ResourceType field value
func (o *SubstatusResponse) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *SubstatusResponse) SetResourceType(v string) {
	o.ResourceType = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SubstatusResponse) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SubstatusResponse) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SubstatusResponse) SetState(v string) {
	o.State = &v
}

// GetSubstatus returns the Substatus field value
func (o *SubstatusResponse) GetSubstatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Substatus
}

// GetSubstatusOk returns a tuple with the Substatus field value
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetSubstatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Substatus, true
}

// SetSubstatus sets field value
func (o *SubstatusResponse) SetSubstatus(v string) {
	o.Substatus = v
}

// GetToken returns the Token field value
func (o *SubstatusResponse) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *SubstatusResponse) SetToken(v string) {
	o.Token = v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *SubstatusResponse) GetUpdatedTime() time.Time {
	if o == nil || IsNil(o.UpdatedTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubstatusResponse) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedTime) {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *SubstatusResponse) HasUpdatedTime() bool {
	if o != nil && !IsNil(o.UpdatedTime) {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *SubstatusResponse) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

func (o SubstatusResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubstatusResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.CreatedTime) {
		toSerialize["created_time"] = o.CreatedTime
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	toSerialize["is_active"] = o.IsActive
	toSerialize["resource_token"] = o.ResourceToken
	toSerialize["resource_type"] = o.ResourceType
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	toSerialize["substatus"] = o.Substatus
	toSerialize["token"] = o.Token
	if !IsNil(o.UpdatedTime) {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	return toSerialize, nil
}

func (o *SubstatusResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_active",
		"resource_token",
		"resource_type",
		"substatus",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubstatusResponse := _SubstatusResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubstatusResponse)

	if err != nil {
		return err
	}

	*o = SubstatusResponse(varSubstatusResponse)

	return err
}

type NullableSubstatusResponse struct {
	value *SubstatusResponse
	isSet bool
}

func (v NullableSubstatusResponse) Get() *SubstatusResponse {
	return v.value
}

func (v *NullableSubstatusResponse) Set(val *SubstatusResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubstatusResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubstatusResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubstatusResponse(val *SubstatusResponse) *NullableSubstatusResponse {
	return &NullableSubstatusResponse{value: val, isSet: true}
}

func (v NullableSubstatusResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubstatusResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


