/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProgramGatewayFundingSourcesAPIService ProgramGatewayFundingSourcesAPI service
type ProgramGatewayFundingSourcesAPIService service

type ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest struct {
	ctx context.Context
	ApiService *ProgramGatewayFundingSourcesAPIService
	token string
}

func (r ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest) Execute() (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	return r.ApiService.GetFundingsourcesProgramgatewayTokenExecute(r)
}

/*
GetFundingsourcesProgramgatewayToken Retrieve program gateway source

Retrieves a specific program gateway funding source.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the program gateway funding source.
 @return ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest
*/
func (a *ProgramGatewayFundingSourcesAPIService) GetFundingsourcesProgramgatewayToken(ctx context.Context, token string) ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest {
	return ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return GatewayProgramFundingSourceResponse
func (a *ProgramGatewayFundingSourcesAPIService) GetFundingsourcesProgramgatewayTokenExecute(r ProgramGatewayFundingSourcesAPIGetFundingsourcesProgramgatewayTokenRequest) (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GatewayProgramFundingSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramGatewayFundingSourcesAPIService.GetFundingsourcesProgramgatewayToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/programgateway/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest struct {
	ctx context.Context
	ApiService *ProgramGatewayFundingSourcesAPIService
	gatewayProgramFundingSourceRequest *GatewayProgramFundingSourceRequest
}

func (r ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest) GatewayProgramFundingSourceRequest(gatewayProgramFundingSourceRequest GatewayProgramFundingSourceRequest) ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest {
	r.gatewayProgramFundingSourceRequest = &gatewayProgramFundingSourceRequest
	return r
}

func (r ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest) Execute() (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	return r.ApiService.PostFundingsourcesProgramgatewayExecute(r)
}

/*
PostFundingsourcesProgramgateway Create program gateway source

Creates a program gateway funding source.
A program gateway funding source is a transaction relay that allows you to approve or decline transactions in real time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest
*/
func (a *ProgramGatewayFundingSourcesAPIService) PostFundingsourcesProgramgateway(ctx context.Context) ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest {
	return ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GatewayProgramFundingSourceResponse
func (a *ProgramGatewayFundingSourcesAPIService) PostFundingsourcesProgramgatewayExecute(r ProgramGatewayFundingSourcesAPIPostFundingsourcesProgramgatewayRequest) (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GatewayProgramFundingSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramGatewayFundingSourcesAPIService.PostFundingsourcesProgramgateway")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/programgateway"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayProgramFundingSourceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest struct {
	ctx context.Context
	ApiService *ProgramGatewayFundingSourcesAPIService
	token string
	gatewayProgramCustomHeaderUpdateRequest *GatewayProgramCustomHeaderUpdateRequest
}

func (r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest) GatewayProgramCustomHeaderUpdateRequest(gatewayProgramCustomHeaderUpdateRequest GatewayProgramCustomHeaderUpdateRequest) ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest {
	r.gatewayProgramCustomHeaderUpdateRequest = &gatewayProgramCustomHeaderUpdateRequest
	return r
}

func (r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest) Execute() (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	return r.ApiService.PutFundingsourcesProgramgatewayCustomHeaderTokenExecute(r)
}

/*
PutFundingsourcesProgramgatewayCustomHeaderToken Update program gateway source custom headers

Adds or updates custom HTTP headers for a specific program gateway funding source.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the program gateway funding source.
 @return ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest
*/
func (a *ProgramGatewayFundingSourcesAPIService) PutFundingsourcesProgramgatewayCustomHeaderToken(ctx context.Context, token string) ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest {
	return ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return GatewayProgramFundingSourceResponse
func (a *ProgramGatewayFundingSourcesAPIService) PutFundingsourcesProgramgatewayCustomHeaderTokenExecute(r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayCustomHeaderTokenRequest) (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GatewayProgramFundingSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramGatewayFundingSourcesAPIService.PutFundingsourcesProgramgatewayCustomHeaderToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/programgateway/customheaders/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayProgramCustomHeaderUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest struct {
	ctx context.Context
	ApiService *ProgramGatewayFundingSourcesAPIService
	token string
	gatewayProgramFundingSourceUpdateRequest *GatewayProgramFundingSourceUpdateRequest
}

func (r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest) GatewayProgramFundingSourceUpdateRequest(gatewayProgramFundingSourceUpdateRequest GatewayProgramFundingSourceUpdateRequest) ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest {
	r.gatewayProgramFundingSourceUpdateRequest = &gatewayProgramFundingSourceUpdateRequest
	return r
}

func (r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest) Execute() (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	return r.ApiService.PutFundingsourcesProgramgatewayTokenExecute(r)
}

/*
PutFundingsourcesProgramgatewayToken Update program gateway source

Update a program gateway funding source.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the program gateway funding source.
 @return ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest
*/
func (a *ProgramGatewayFundingSourcesAPIService) PutFundingsourcesProgramgatewayToken(ctx context.Context, token string) ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest {
	return ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return GatewayProgramFundingSourceResponse
func (a *ProgramGatewayFundingSourcesAPIService) PutFundingsourcesProgramgatewayTokenExecute(r ProgramGatewayFundingSourcesAPIPutFundingsourcesProgramgatewayTokenRequest) (*GatewayProgramFundingSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GatewayProgramFundingSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProgramGatewayFundingSourcesAPIService.PutFundingsourcesProgramgatewayToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fundingsources/programgateway/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gatewayProgramFundingSourceUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
