/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Program type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Program{}

// Program Information about the program on the Marqeta platform.
type Program struct {
	// The program long code on the Marqeta platform.
	LongCode string `json:"long_code"`
	// The program identifier on the Marqeta platform.
	ProgramId string `json:"program_id"`
	// The program short code on the Marqeta platform.
	ShortCode string `json:"short_code"`
}

type _Program Program

// NewProgram instantiates a new Program object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgram(longCode string, programId string, shortCode string) *Program {
	this := Program{}
	this.LongCode = longCode
	this.ProgramId = programId
	this.ShortCode = shortCode
	return &this
}

// NewProgramWithDefaults instantiates a new Program object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgramWithDefaults() *Program {
	this := Program{}
	return &this
}

// GetLongCode returns the LongCode field value
func (o *Program) GetLongCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LongCode
}

// GetLongCodeOk returns a tuple with the LongCode field value
// and a boolean to check if the value has been set.
func (o *Program) GetLongCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LongCode, true
}

// SetLongCode sets field value
func (o *Program) SetLongCode(v string) {
	o.LongCode = v
}

// GetProgramId returns the ProgramId field value
func (o *Program) GetProgramId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *Program) GetProgramIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *Program) SetProgramId(v string) {
	o.ProgramId = v
}

// GetShortCode returns the ShortCode field value
func (o *Program) GetShortCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShortCode
}

// GetShortCodeOk returns a tuple with the ShortCode field value
// and a boolean to check if the value has been set.
func (o *Program) GetShortCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShortCode, true
}

// SetShortCode sets field value
func (o *Program) SetShortCode(v string) {
	o.ShortCode = v
}

func (o Program) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Program) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["long_code"] = o.LongCode
	toSerialize["program_id"] = o.ProgramId
	toSerialize["short_code"] = o.ShortCode
	return toSerialize, nil
}

func (o *Program) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"long_code",
		"program_id",
		"short_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProgram := _Program{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProgram)

	if err != nil {
		return err
	}

	*o = Program(varProgram)

	return err
}

type NullableProgram struct {
	value *Program
	isSet bool
}

func (v NullableProgram) Get() *Program {
	return v.value
}

func (v *NullableProgram) Set(val *Program) {
	v.value = val
	v.isSet = true
}

func (v NullableProgram) IsSet() bool {
	return v.isSet
}

func (v *NullableProgram) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgram(val *Program) *NullableProgram {
	return &NullableProgram{value: val, isSet: true}
}

func (v NullableProgram) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgram) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


