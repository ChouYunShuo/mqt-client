/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PaymentSourcesAPIService PaymentSourcesAPI service
type PaymentSourcesAPIService service

type PaymentSourcesAPICreatePaymentSourceRequest struct {
	ctx context.Context
	ApiService *PaymentSourcesAPIService
	paymentSourceCreateReq *PaymentSourceCreateReq
}

func (r PaymentSourcesAPICreatePaymentSourceRequest) PaymentSourceCreateReq(paymentSourceCreateReq PaymentSourceCreateReq) PaymentSourcesAPICreatePaymentSourceRequest {
	r.paymentSourceCreateReq = &paymentSourceCreateReq
	return r
}

func (r PaymentSourcesAPICreatePaymentSourceRequest) Execute() (*PaymentSourceResponse, *http.Response, error) {
	return r.ApiService.CreatePaymentSourceExecute(r)
}

/*
CreatePaymentSource Create payment source

Create a payment source from which to make payments.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PaymentSourcesAPICreatePaymentSourceRequest
*/
func (a *PaymentSourcesAPIService) CreatePaymentSource(ctx context.Context) PaymentSourcesAPICreatePaymentSourceRequest {
	return PaymentSourcesAPICreatePaymentSourceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentSourceResponse
func (a *PaymentSourcesAPIService) CreatePaymentSourceExecute(r PaymentSourcesAPICreatePaymentSourceRequest) (*PaymentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSourcesAPIService.CreatePaymentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paymentsources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentSourceCreateReq == nil {
		return localVarReturnValue, nil, reportError("paymentSourceCreateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentSourceCreateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentSourcesAPIListPaymentSourcesRequest struct {
	ctx context.Context
	ApiService *PaymentSourcesAPIService
	accountToken *string
	userToken *string
	businessToken *string
	count *int32
	startIndex *int32
	sortBy *string
}

// Unique identifier of the credit account associated with the payment source.
func (r PaymentSourcesAPIListPaymentSourcesRequest) AccountToken(accountToken string) PaymentSourcesAPIListPaymentSourcesRequest {
	r.accountToken = &accountToken
	return r
}

// Unique identifier of the user associated with the payment source.
func (r PaymentSourcesAPIListPaymentSourcesRequest) UserToken(userToken string) PaymentSourcesAPIListPaymentSourcesRequest {
	r.userToken = &userToken
	return r
}

// Unique identifier of the business associated with the payment source.
func (r PaymentSourcesAPIListPaymentSourcesRequest) BusinessToken(businessToken string) PaymentSourcesAPIListPaymentSourcesRequest {
	r.businessToken = &businessToken
	return r
}

// Number of payment source resources to retrieve.
func (r PaymentSourcesAPIListPaymentSourcesRequest) Count(count int32) PaymentSourcesAPIListPaymentSourcesRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r PaymentSourcesAPIListPaymentSourcesRequest) StartIndex(startIndex int32) PaymentSourcesAPIListPaymentSourcesRequest {
	r.startIndex = &startIndex
	return r
}

// Field on which to sort. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.  *NOTE:* You must sort using system field names such as &#x60;lastModifiedTime&#x60;, and not by the field names appearing in response bodies such as &#x60;last_modified_time&#x60;.
func (r PaymentSourcesAPIListPaymentSourcesRequest) SortBy(sortBy string) PaymentSourcesAPIListPaymentSourcesRequest {
	r.sortBy = &sortBy
	return r
}

func (r PaymentSourcesAPIListPaymentSourcesRequest) Execute() (*PaymentSourcePage, *http.Response, error) {
	return r.ApiService.ListPaymentSourcesExecute(r)
}

/*
ListPaymentSources List payment sources

Retrieve an array of payment sources.

This endpoint supports <</core-api/sorting-and-pagination, sorting and pagination>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PaymentSourcesAPIListPaymentSourcesRequest
*/
func (a *PaymentSourcesAPIService) ListPaymentSources(ctx context.Context) PaymentSourcesAPIListPaymentSourcesRequest {
	return PaymentSourcesAPIListPaymentSourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentSourcePage
func (a *PaymentSourcesAPIService) ListPaymentSourcesExecute(r PaymentSourcesAPIListPaymentSourcesRequest) (*PaymentSourcePage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentSourcePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSourcesAPIService.ListPaymentSources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paymentsources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "account_token", r.accountToken, "")
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentSourcesAPIRetrievePaymentSourceRequest struct {
	ctx context.Context
	ApiService *PaymentSourcesAPIService
	token string
}

func (r PaymentSourcesAPIRetrievePaymentSourceRequest) Execute() (*PaymentSourceResponse, *http.Response, error) {
	return r.ApiService.RetrievePaymentSourceExecute(r)
}

/*
RetrievePaymentSource Retrieve payment source

Retrieve a payment source.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the payment source to retrieve.  Send a `GET` request to `/credit/paymentsources` to retrieve existing payment source tokens.
 @return PaymentSourcesAPIRetrievePaymentSourceRequest
*/
func (a *PaymentSourcesAPIService) RetrievePaymentSource(ctx context.Context, token string) PaymentSourcesAPIRetrievePaymentSourceRequest {
	return PaymentSourcesAPIRetrievePaymentSourceRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return PaymentSourceResponse
func (a *PaymentSourcesAPIService) RetrievePaymentSourceExecute(r PaymentSourcesAPIRetrievePaymentSourceRequest) (*PaymentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSourcesAPIService.RetrievePaymentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paymentsources/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PaymentSourcesAPIUpdatePaymentSourceRequest struct {
	ctx context.Context
	ApiService *PaymentSourcesAPIService
	token string
	paymentSourceUpdateReq *PaymentSourceUpdateReq
}

func (r PaymentSourcesAPIUpdatePaymentSourceRequest) PaymentSourceUpdateReq(paymentSourceUpdateReq PaymentSourceUpdateReq) PaymentSourcesAPIUpdatePaymentSourceRequest {
	r.paymentSourceUpdateReq = &paymentSourceUpdateReq
	return r
}

func (r PaymentSourcesAPIUpdatePaymentSourceRequest) Execute() (*PaymentSourceResponse, *http.Response, error) {
	return r.ApiService.UpdatePaymentSourceExecute(r)
}

/*
UpdatePaymentSource Update payment source

Update details of a payment source.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the payment source to retrieve.  Send a `GET` request to `/credit/paymentsources` to retrieve existing payment source tokens.
 @return PaymentSourcesAPIUpdatePaymentSourceRequest
*/
func (a *PaymentSourcesAPIService) UpdatePaymentSource(ctx context.Context, token string) PaymentSourcesAPIUpdatePaymentSourceRequest {
	return PaymentSourcesAPIUpdatePaymentSourceRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return PaymentSourceResponse
func (a *PaymentSourcesAPIService) UpdatePaymentSourceExecute(r PaymentSourcesAPIUpdatePaymentSourceRequest) (*PaymentSourceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentSourcesAPIService.UpdatePaymentSource")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/paymentsources/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentSourceUpdateReq == nil {
		return localVarReturnValue, nil, reportError("paymentSourceUpdateReq is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentSourceUpdateReq
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
