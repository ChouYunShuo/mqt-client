/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CurrencyConversion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyConversion{}

// CurrencyConversion Contains information about currency conversion.
type CurrencyConversion struct {
	Network *Network `json:"network,omitempty"`
}

// NewCurrencyConversion instantiates a new CurrencyConversion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyConversion() *CurrencyConversion {
	this := CurrencyConversion{}
	return &this
}

// NewCurrencyConversionWithDefaults instantiates a new CurrencyConversion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyConversionWithDefaults() *CurrencyConversion {
	this := CurrencyConversion{}
	return &this
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *CurrencyConversion) GetNetwork() Network {
	if o == nil || IsNil(o.Network) {
		var ret Network
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyConversion) GetNetworkOk() (*Network, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *CurrencyConversion) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given Network and assigns it to the Network field.
func (o *CurrencyConversion) SetNetwork(v Network) {
	o.Network = &v
}

func (o CurrencyConversion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyConversion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	return toSerialize, nil
}

type NullableCurrencyConversion struct {
	value *CurrencyConversion
	isSet bool
}

func (v NullableCurrencyConversion) Get() *CurrencyConversion {
	return v.value
}

func (v *NullableCurrencyConversion) Set(val *CurrencyConversion) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyConversion) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyConversion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyConversion(val *CurrencyConversion) *NullableCurrencyConversion {
	return &NullableCurrencyConversion{value: val, isSet: true}
}

func (v NullableCurrencyConversion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyConversion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


