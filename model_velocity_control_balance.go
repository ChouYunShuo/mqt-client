/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VelocityControlBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VelocityControlBalance{}

// VelocityControlBalance struct for VelocityControlBalance
type VelocityControlBalance struct {
	// Indicates whether the velocity control is active.
	Active *bool `json:"active,omitempty"`
	// Maximum monetary sum that can be cleared within the time period defined by velocity period.
	AmountLimit decimal.Decimal `json:"amount_limit"`
	Association *Association `json:"association,omitempty"`
	// Three-character ISO 4217 currency code.
	CurrencyCode string `json:"currency_code"`
	MerchantScope *MerchantScope `json:"merchant_scope,omitempty"`
	// Description of how the velocity control restricts spending. For example, \"Max spend of $500 per day\" or \"Max spend of $5000 per month for non-exempt employees\".
	Name *string `json:"name,omitempty"`
	// Unique identifier of the velocity control.
	Token *string `json:"token,omitempty"`
	// Maximum number of times a card can be used within the time period defined by the `velocity_window` field.  Leave `null` to indicate that the card can be used an unlimited number of times.
	UsageLimit *int32 `json:"usage_limit,omitempty"`
	VelocityWindow *VelocityWindow `json:"velocity_window,omitempty"`
	// Start day of the velocity window defined by the `velocity_window` field. Default value is `1`
	VelocityWindowStartDay *int32 `json:"velocity_window_start_day,omitempty"`
	Available *VelocityControlBalanceAllOfAvailable `json:"available,omitempty"`
}

type _VelocityControlBalance VelocityControlBalance

// NewVelocityControlBalance instantiates a new VelocityControlBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVelocityControlBalance(amountLimit decimal.Decimal, currencyCode string) *VelocityControlBalance {
	this := VelocityControlBalance{}
	var active bool = false
	this.Active = &active
	this.AmountLimit = amountLimit
	this.CurrencyCode = currencyCode
	return &this
}

// NewVelocityControlBalanceWithDefaults instantiates a new VelocityControlBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVelocityControlBalanceWithDefaults() *VelocityControlBalance {
	this := VelocityControlBalance{}
	var active bool = false
	this.Active = &active
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *VelocityControlBalance) SetActive(v bool) {
	o.Active = &v
}

// GetAmountLimit returns the AmountLimit field value
func (o *VelocityControlBalance) GetAmountLimit() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.AmountLimit
}

// GetAmountLimitOk returns a tuple with the AmountLimit field value
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetAmountLimitOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmountLimit, true
}

// SetAmountLimit sets field value
func (o *VelocityControlBalance) SetAmountLimit(v decimal.Decimal) {
	o.AmountLimit = v
}

// GetAssociation returns the Association field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetAssociation() Association {
	if o == nil || IsNil(o.Association) {
		var ret Association
		return ret
	}
	return *o.Association
}

// GetAssociationOk returns a tuple with the Association field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetAssociationOk() (*Association, bool) {
	if o == nil || IsNil(o.Association) {
		return nil, false
	}
	return o.Association, true
}

// HasAssociation returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasAssociation() bool {
	if o != nil && !IsNil(o.Association) {
		return true
	}

	return false
}

// SetAssociation gets a reference to the given Association and assigns it to the Association field.
func (o *VelocityControlBalance) SetAssociation(v Association) {
	o.Association = &v
}

// GetCurrencyCode returns the CurrencyCode field value
func (o *VelocityControlBalance) GetCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetCurrencyCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *VelocityControlBalance) SetCurrencyCode(v string) {
	o.CurrencyCode = v
}

// GetMerchantScope returns the MerchantScope field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetMerchantScope() MerchantScope {
	if o == nil || IsNil(o.MerchantScope) {
		var ret MerchantScope
		return ret
	}
	return *o.MerchantScope
}

// GetMerchantScopeOk returns a tuple with the MerchantScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetMerchantScopeOk() (*MerchantScope, bool) {
	if o == nil || IsNil(o.MerchantScope) {
		return nil, false
	}
	return o.MerchantScope, true
}

// HasMerchantScope returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasMerchantScope() bool {
	if o != nil && !IsNil(o.MerchantScope) {
		return true
	}

	return false
}

// SetMerchantScope gets a reference to the given MerchantScope and assigns it to the MerchantScope field.
func (o *VelocityControlBalance) SetMerchantScope(v MerchantScope) {
	o.MerchantScope = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VelocityControlBalance) SetName(v string) {
	o.Name = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *VelocityControlBalance) SetToken(v string) {
	o.Token = &v
}

// GetUsageLimit returns the UsageLimit field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetUsageLimit() int32 {
	if o == nil || IsNil(o.UsageLimit) {
		var ret int32
		return ret
	}
	return *o.UsageLimit
}

// GetUsageLimitOk returns a tuple with the UsageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetUsageLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.UsageLimit) {
		return nil, false
	}
	return o.UsageLimit, true
}

// HasUsageLimit returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasUsageLimit() bool {
	if o != nil && !IsNil(o.UsageLimit) {
		return true
	}

	return false
}

// SetUsageLimit gets a reference to the given int32 and assigns it to the UsageLimit field.
func (o *VelocityControlBalance) SetUsageLimit(v int32) {
	o.UsageLimit = &v
}

// GetVelocityWindow returns the VelocityWindow field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetVelocityWindow() VelocityWindow {
	if o == nil || IsNil(o.VelocityWindow) {
		var ret VelocityWindow
		return ret
	}
	return *o.VelocityWindow
}

// GetVelocityWindowOk returns a tuple with the VelocityWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetVelocityWindowOk() (*VelocityWindow, bool) {
	if o == nil || IsNil(o.VelocityWindow) {
		return nil, false
	}
	return o.VelocityWindow, true
}

// HasVelocityWindow returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasVelocityWindow() bool {
	if o != nil && !IsNil(o.VelocityWindow) {
		return true
	}

	return false
}

// SetVelocityWindow gets a reference to the given VelocityWindow and assigns it to the VelocityWindow field.
func (o *VelocityControlBalance) SetVelocityWindow(v VelocityWindow) {
	o.VelocityWindow = &v
}

// GetVelocityWindowStartDay returns the VelocityWindowStartDay field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetVelocityWindowStartDay() int32 {
	if o == nil || IsNil(o.VelocityWindowStartDay) {
		var ret int32
		return ret
	}
	return *o.VelocityWindowStartDay
}

// GetVelocityWindowStartDayOk returns a tuple with the VelocityWindowStartDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetVelocityWindowStartDayOk() (*int32, bool) {
	if o == nil || IsNil(o.VelocityWindowStartDay) {
		return nil, false
	}
	return o.VelocityWindowStartDay, true
}

// HasVelocityWindowStartDay returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasVelocityWindowStartDay() bool {
	if o != nil && !IsNil(o.VelocityWindowStartDay) {
		return true
	}

	return false
}

// SetVelocityWindowStartDay gets a reference to the given int32 and assigns it to the VelocityWindowStartDay field.
func (o *VelocityControlBalance) SetVelocityWindowStartDay(v int32) {
	o.VelocityWindowStartDay = &v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *VelocityControlBalance) GetAvailable() VelocityControlBalanceAllOfAvailable {
	if o == nil || IsNil(o.Available) {
		var ret VelocityControlBalanceAllOfAvailable
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VelocityControlBalance) GetAvailableOk() (*VelocityControlBalanceAllOfAvailable, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *VelocityControlBalance) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given VelocityControlBalanceAllOfAvailable and assigns it to the Available field.
func (o *VelocityControlBalance) SetAvailable(v VelocityControlBalanceAllOfAvailable) {
	o.Available = &v
}

func (o VelocityControlBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VelocityControlBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	toSerialize["amount_limit"] = o.AmountLimit
	if !IsNil(o.Association) {
		toSerialize["association"] = o.Association
	}
	toSerialize["currency_code"] = o.CurrencyCode
	if !IsNil(o.MerchantScope) {
		toSerialize["merchant_scope"] = o.MerchantScope
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.UsageLimit) {
		toSerialize["usage_limit"] = o.UsageLimit
	}
	if !IsNil(o.VelocityWindow) {
		toSerialize["velocity_window"] = o.VelocityWindow
	}
	if !IsNil(o.VelocityWindowStartDay) {
		toSerialize["velocity_window_start_day"] = o.VelocityWindowStartDay
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	return toSerialize, nil
}

func (o *VelocityControlBalance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount_limit",
		"currency_code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVelocityControlBalance := _VelocityControlBalance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVelocityControlBalance)

	if err != nil {
		return err
	}

	*o = VelocityControlBalance(varVelocityControlBalance)

	return err
}

type NullableVelocityControlBalance struct {
	value *VelocityControlBalance
	isSet bool
}

func (v NullableVelocityControlBalance) Get() *VelocityControlBalance {
	return v.value
}

func (v *NullableVelocityControlBalance) Set(val *VelocityControlBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableVelocityControlBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableVelocityControlBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVelocityControlBalance(val *VelocityControlBalance) *NullableVelocityControlBalance {
	return &NullableVelocityControlBalance{value: val, isSet: true}
}

func (v NullableVelocityControlBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVelocityControlBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


