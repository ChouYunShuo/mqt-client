/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Text type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Text{}

// Text Specifies personalized text that appears on the card.
type Text struct {
	NameLine1 TextValue `json:"name_line_1"`
	NameLine2 *TextValue `json:"name_line_2,omitempty"`
	NameLine3 *TextValue `json:"name_line_3,omitempty"`
}

type _Text Text

// NewText instantiates a new Text object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewText(nameLine1 TextValue) *Text {
	this := Text{}
	this.NameLine1 = nameLine1
	return &this
}

// NewTextWithDefaults instantiates a new Text object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextWithDefaults() *Text {
	this := Text{}
	return &this
}

// GetNameLine1 returns the NameLine1 field value
func (o *Text) GetNameLine1() TextValue {
	if o == nil {
		var ret TextValue
		return ret
	}

	return o.NameLine1
}

// GetNameLine1Ok returns a tuple with the NameLine1 field value
// and a boolean to check if the value has been set.
func (o *Text) GetNameLine1Ok() (*TextValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NameLine1, true
}

// SetNameLine1 sets field value
func (o *Text) SetNameLine1(v TextValue) {
	o.NameLine1 = v
}

// GetNameLine2 returns the NameLine2 field value if set, zero value otherwise.
func (o *Text) GetNameLine2() TextValue {
	if o == nil || IsNil(o.NameLine2) {
		var ret TextValue
		return ret
	}
	return *o.NameLine2
}

// GetNameLine2Ok returns a tuple with the NameLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Text) GetNameLine2Ok() (*TextValue, bool) {
	if o == nil || IsNil(o.NameLine2) {
		return nil, false
	}
	return o.NameLine2, true
}

// HasNameLine2 returns a boolean if a field has been set.
func (o *Text) HasNameLine2() bool {
	if o != nil && !IsNil(o.NameLine2) {
		return true
	}

	return false
}

// SetNameLine2 gets a reference to the given TextValue and assigns it to the NameLine2 field.
func (o *Text) SetNameLine2(v TextValue) {
	o.NameLine2 = &v
}

// GetNameLine3 returns the NameLine3 field value if set, zero value otherwise.
func (o *Text) GetNameLine3() TextValue {
	if o == nil || IsNil(o.NameLine3) {
		var ret TextValue
		return ret
	}
	return *o.NameLine3
}

// GetNameLine3Ok returns a tuple with the NameLine3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Text) GetNameLine3Ok() (*TextValue, bool) {
	if o == nil || IsNil(o.NameLine3) {
		return nil, false
	}
	return o.NameLine3, true
}

// HasNameLine3 returns a boolean if a field has been set.
func (o *Text) HasNameLine3() bool {
	if o != nil && !IsNil(o.NameLine3) {
		return true
	}

	return false
}

// SetNameLine3 gets a reference to the given TextValue and assigns it to the NameLine3 field.
func (o *Text) SetNameLine3(v TextValue) {
	o.NameLine3 = &v
}

func (o Text) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Text) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name_line_1"] = o.NameLine1
	if !IsNil(o.NameLine2) {
		toSerialize["name_line_2"] = o.NameLine2
	}
	if !IsNil(o.NameLine3) {
		toSerialize["name_line_3"] = o.NameLine3
	}
	return toSerialize, nil
}

func (o *Text) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name_line_1",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varText := _Text{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varText)

	if err != nil {
		return err
	}

	*o = Text(varText)

	return err
}

type NullableText struct {
	value *Text
	isSet bool
}

func (v NullableText) Get() *Text {
	return v.value
}

func (v *NullableText) Set(val *Text) {
	v.value = val
	v.isSet = true
}

func (v NullableText) IsSet() bool {
	return v.isSet
}

func (v *NullableText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableText(val *Text) *NullableText {
	return &NullableText{value: val, isSet: true}
}

func (v NullableText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


