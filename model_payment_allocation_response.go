/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
	"github.com/shopspring/decimal"
)

// checks if the PaymentAllocationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaymentAllocationResponse{}

// PaymentAllocationResponse Object containing payment allocation information.
type PaymentAllocationResponse struct {
	// Total amount of the payment allocation.
	Amount decimal.Decimal `json:"amount"`
	// category a portion of the payment is allocated to.
	Bucket string `json:"bucket"`
}

type _PaymentAllocationResponse PaymentAllocationResponse

// NewPaymentAllocationResponse instantiates a new PaymentAllocationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentAllocationResponse(amount decimal.Decimal, bucket string) *PaymentAllocationResponse {
	this := PaymentAllocationResponse{}
	this.Amount = amount
	this.Bucket = bucket
	return &this
}

// NewPaymentAllocationResponseWithDefaults instantiates a new PaymentAllocationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentAllocationResponseWithDefaults() *PaymentAllocationResponse {
	this := PaymentAllocationResponse{}
	return &this
}

// GetAmount returns the Amount field value
func (o *PaymentAllocationResponse) GetAmount() decimal.Decimal {
	if o == nil {
		var ret decimal.Decimal
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *PaymentAllocationResponse) GetAmountOk() (*decimal.Decimal, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *PaymentAllocationResponse) SetAmount(v decimal.Decimal) {
	o.Amount = v
}

// GetBucket returns the Bucket field value
func (o *PaymentAllocationResponse) GetBucket() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *PaymentAllocationResponse) GetBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *PaymentAllocationResponse) SetBucket(v string) {
	o.Bucket = v
}

func (o PaymentAllocationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaymentAllocationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["bucket"] = o.Bucket
	return toSerialize, nil
}

func (o *PaymentAllocationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"bucket",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaymentAllocationResponse := _PaymentAllocationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPaymentAllocationResponse)

	if err != nil {
		return err
	}

	*o = PaymentAllocationResponse(varPaymentAllocationResponse)

	return err
}

type NullablePaymentAllocationResponse struct {
	value *PaymentAllocationResponse
	isSet bool
}

func (v NullablePaymentAllocationResponse) Get() *PaymentAllocationResponse {
	return v.value
}

func (v *NullablePaymentAllocationResponse) Set(val *PaymentAllocationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentAllocationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentAllocationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentAllocationResponse(val *PaymentAllocationResponse) *NullablePaymentAllocationResponse {
	return &NullablePaymentAllocationResponse{value: val, isSet: true}
}

func (v NullablePaymentAllocationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentAllocationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


