/*
Core API

Marqeta's Core API endpoints, conveniently annotated to enable code generation (including SDKs), test cases, and documentation. Currently in beta.

API version: 3.0.19
Contact: support@marqeta.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GPAOrdersAPIService GPAOrdersAPI service
type GPAOrdersAPIService service

type GPAOrdersAPIGetGpaordersTokenRequest struct {
	ctx context.Context
	ApiService *GPAOrdersAPIService
	token string
}

func (r GPAOrdersAPIGetGpaordersTokenRequest) Execute() (*GpaResponse, *http.Response, error) {
	return r.ApiService.GetGpaordersTokenExecute(r)
}

/*
GetGpaordersToken Retrieve GPA order

Use this endpoint to retrieve a GPA order.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param token Unique identifier of the GPA order.  Send a `GET` request to `/transactions?type=gpa.credit` to retrieve GPA order tokens.
 @return GPAOrdersAPIGetGpaordersTokenRequest
*/
func (a *GPAOrdersAPIService) GetGpaordersToken(ctx context.Context, token string) GPAOrdersAPIGetGpaordersTokenRequest {
	return GPAOrdersAPIGetGpaordersTokenRequest{
		ApiService: a,
		ctx: ctx,
		token: token,
	}
}

// Execute executes the request
//  @return GpaResponse
func (a *GPAOrdersAPIService) GetGpaordersTokenExecute(r GPAOrdersAPIGetGpaordersTokenRequest) (*GpaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GpaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GPAOrdersAPIService.GetGpaordersToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gpaorders/{token}"
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", url.PathEscape(parameterValueToString(r.token, "token")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GPAOrdersAPIGetGpaordersUnloadsRequest struct {
	ctx context.Context
	ApiService *GPAOrdersAPIService
	count *int32
	startIndex *int32
	fields *string
	sortBy *string
	userToken *string
	businessToken *string
	originalOrderToken *string
}

// Number of resources to retrieve.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) Count(count int32) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.count = &count
	return r
}

// Sort order index of the first resource in the returned array.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) StartIndex(startIndex int32) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.startIndex = &startIndex
	return r
}

// Comma-delimited list of fields to return (&#x60;field_1,field_2&#x60;, and so on). Leave blank to return all fields.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) Fields(fields string) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.fields = &fields
	return r
}

// Field on which to sort. Use any field in the resource model, or one of the system fields &#x60;lastModifiedTime&#x60; or &#x60;createdTime&#x60;. Prefix the field name with a hyphen (&#x60;-&#x60;) to sort in descending order. Omit the hyphen to sort in ascending order.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) SortBy(sortBy string) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.sortBy = &sortBy
	return r
}

// Unique identifier of the user resource.  Send a &#x60;GET&#x60; request to &#x60;/users&#x60; to retrieve user tokens.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) UserToken(userToken string) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.userToken = &userToken
	return r
}

// Unique identifier of the business resource.  Send a &#x60;GET&#x60; request to &#x60;/businesses&#x60; to retrieve business tokens.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) BusinessToken(businessToken string) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.businessToken = &businessToken
	return r
}

// Unique identifier of the original GPA order.  Send a &#x60;GET&#x60; request to &#x60;/transactions?type&#x3D;gpa.credit&#x60; to retrieve GPA order tokens.
func (r GPAOrdersAPIGetGpaordersUnloadsRequest) OriginalOrderToken(originalOrderToken string) GPAOrdersAPIGetGpaordersUnloadsRequest {
	r.originalOrderToken = &originalOrderToken
	return r
}

func (r GPAOrdersAPIGetGpaordersUnloadsRequest) Execute() (*GPAUnloadListResponse, *http.Response, error) {
	return r.ApiService.GetGpaordersUnloadsExecute(r)
}

/*
GetGpaordersUnloads List GPA unloads

Use this endpoint to list all GPA unloads or GPA unloads associated with a specific user or business.

This endpoint supports <</core-api/field-filtering, field filtering>> and <</core-api/sorting-and-pagination, pagination>>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GPAOrdersAPIGetGpaordersUnloadsRequest
*/
func (a *GPAOrdersAPIService) GetGpaordersUnloads(ctx context.Context) GPAOrdersAPIGetGpaordersUnloadsRequest {
	return GPAOrdersAPIGetGpaordersUnloadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GPAUnloadListResponse
func (a *GPAOrdersAPIService) GetGpaordersUnloadsExecute(r GPAOrdersAPIGetGpaordersUnloadsRequest) (*GPAUnloadListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GPAUnloadListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GPAOrdersAPIService.GetGpaordersUnloads")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gpaorders/unloads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.count != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "count", r.count, "")
	} else {
		var defaultValue int32 = 5
		r.count = &defaultValue
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_index", r.startIndex, "")
	} else {
		var defaultValue int32 = 0
		r.startIndex = &defaultValue
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_by", r.sortBy, "")
	} else {
		var defaultValue string = "-lastModifiedTime"
		r.sortBy = &defaultValue
	}
	if r.userToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_token", r.userToken, "")
	}
	if r.businessToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "business_token", r.businessToken, "")
	}
	if r.originalOrderToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "original_order_token", r.originalOrderToken, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest struct {
	ctx context.Context
	ApiService *GPAOrdersAPIService
	unloadToken string
}

func (r GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest) Execute() (*GpaReturns, *http.Response, error) {
	return r.ApiService.GetGpaordersUnloadsUnloadtokenExecute(r)
}

/*
GetGpaordersUnloadsUnloadtoken Retrieve GPA unload

Use this endpoint to retrieve a specific GPA unload.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param unloadToken Unique identifier of the GPA unload.
 @return GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest
*/
func (a *GPAOrdersAPIService) GetGpaordersUnloadsUnloadtoken(ctx context.Context, unloadToken string) GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest {
	return GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest{
		ApiService: a,
		ctx: ctx,
		unloadToken: unloadToken,
	}
}

// Execute executes the request
//  @return GpaReturns
func (a *GPAOrdersAPIService) GetGpaordersUnloadsUnloadtokenExecute(r GPAOrdersAPIGetGpaordersUnloadsUnloadtokenRequest) (*GpaReturns, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GpaReturns
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GPAOrdersAPIService.GetGpaordersUnloadsUnloadtoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gpaorders/unloads/{unload_token}"
	localVarPath = strings.Replace(localVarPath, "{"+"unload_token"+"}", url.PathEscape(parameterValueToString(r.unloadToken, "unloadToken")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GPAOrdersAPIPostGpaordersRequest struct {
	ctx context.Context
	ApiService *GPAOrdersAPIService
	gpaRequest *GpaRequest
}

func (r GPAOrdersAPIPostGpaordersRequest) GpaRequest(gpaRequest GpaRequest) GPAOrdersAPIPostGpaordersRequest {
	r.gpaRequest = &gpaRequest
	return r
}

func (r GPAOrdersAPIPostGpaordersRequest) Execute() (*GpaResponse, *http.Response, error) {
	return r.ApiService.PostGpaordersExecute(r)
}

/*
PostGpaorders Create GPA order

Use this endpoint to create an order to fund an account holder's GPA.

You can assess a <</core-api/fees, fee>> while funding a GPA by using the optional `fees` array to attach one or more fee resources to the GPA order.
When you create a GPA order, the GPA is first credited for the fees, then debited at funding time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GPAOrdersAPIPostGpaordersRequest
*/
func (a *GPAOrdersAPIService) PostGpaorders(ctx context.Context) GPAOrdersAPIPostGpaordersRequest {
	return GPAOrdersAPIPostGpaordersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GpaResponse
func (a *GPAOrdersAPIService) PostGpaordersExecute(r GPAOrdersAPIPostGpaordersRequest) (*GpaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GpaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GPAOrdersAPIService.PostGpaorders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gpaorders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gpaRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GPAOrdersAPIPostGpaordersUnloadsRequest struct {
	ctx context.Context
	ApiService *GPAOrdersAPIService
	unloadRequestModel *UnloadRequestModel
}

func (r GPAOrdersAPIPostGpaordersUnloadsRequest) UnloadRequestModel(unloadRequestModel UnloadRequestModel) GPAOrdersAPIPostGpaordersUnloadsRequest {
	r.unloadRequestModel = &unloadRequestModel
	return r
}

func (r GPAOrdersAPIPostGpaordersUnloadsRequest) Execute() (*GpaReturns, *http.Response, error) {
	return r.ApiService.PostGpaordersUnloadsExecute(r)
}

/*
PostGpaordersUnloads Create GPA unload

Use this endpoint to unload a GPA order.

Unloading a GPA order returns funds to the funding source.
A GPA unload must be tied to an original GPA order and can be used to return the amount of the original order or a lesser amount.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GPAOrdersAPIPostGpaordersUnloadsRequest
*/
func (a *GPAOrdersAPIService) PostGpaordersUnloads(ctx context.Context) GPAOrdersAPIPostGpaordersUnloadsRequest {
	return GPAOrdersAPIPostGpaordersUnloadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GpaReturns
func (a *GPAOrdersAPIService) PostGpaordersUnloadsExecute(r GPAOrdersAPIPostGpaordersUnloadsRequest) (*GpaReturns, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GpaReturns
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GPAOrdersAPIService.PostGpaordersUnloads")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gpaorders/unloads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.unloadRequestModel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
